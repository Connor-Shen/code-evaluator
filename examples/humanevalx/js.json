{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "generation_raw": "  const sorted = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sorted.length - 1; i++) {\n    if (sorted[i + 1] - sorted[i] <= threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n```", "generation": "  const sorted = numbers.sort((a, b) => a - b);\n  for (let i = 0; i < sorted.length - 1; i++) {\n    if (sorted[i + 1] - sorted[i] <= threshold) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "generation_raw": "  let paren_groups = [];\n  let paren_group = '';\n  let open_parens = 0;\n  let close_parens = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_parens += 1;\n      paren_group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      close_parens += 1;\n      paren_group += paren_string[i];\n    } else {\n      paren_group += paren_string[i];\n    }\n    if (open_parens === close_parens) {\n      paren_groups.push(paren_group);\n      paren_group = '';\n      open_parens = 0;\n      close_parens = 0;\n    }\n  }\n  return paren_groups;\n};\n\n/*\n  The following function is a helper function that will return the number of times a character appears in a string.\n  This function is used in the function below.\n  The function below will return the number of times a character appears in a string.\n  The function will return -1 if the character does not appear in the string.\n  The function will return 0 if the character appears in the string but not an even number of times.\n  The function will return 1 if the character appears in the string and an even number of times.\n  The function will return 2 if the character appears in the string and an odd number of times.\n  The function will return 3 if the character appears in the string and appears in an odd number of places but is not followed by an even number of characters.\n  The function will return 4 if the character appears in the string and appears in an odd number of places but is followed by an even number of characters.\n  The function will return 5 if the character appears in the string and appears in an even number of places but is not preceded by an odd number of characters.\n  The function will return 6 if the character appears in the string and appears in an even number of", "generation": "  let paren_groups = [];\n  let paren_group = '';\n  let open_parens = 0;\n  let close_parens = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_parens += 1;\n      paren_group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      close_parens += 1;\n      paren_group += paren_string[i];\n    } else {\n      paren_group += paren_string[i];\n    }\n    if (open_parens === close_parens) {\n      paren_groups.push(paren_group);\n      paren_group = '';\n      open_parens = 0;\n      close_parens = 0;\n    }\n  }\n  return paren_groups;\n}"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "generation_raw": "  return number - Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number,", "generation": "  return number - Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "generation_raw": "  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  /*\n  You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  /*\n  You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  /*\n  You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false", "generation": "  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  /*\n  You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  /*\n  You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "generation_raw": "  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = numbers.sort((a, b) => a - b)[numbers.length >> 1];\n  return numbers.reduce((a, b) => a + Math.abs(b - median), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.118033988749895\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */", "generation": "  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = numbers.sort((a, b) => a - b)[numbers.length >> 1];\n  return numbers.reduce((a, b) => a + Math.abs(b - median), 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.118033988749895\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "generation_raw": "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\n/*\n  /*\n   * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n   *\n   * @param {number[]} numbers\n   * @param {number} delimeter\n   * @return {number[]}\n   */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n*/\n```", "generation": "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\n/*\n  /*\n   * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n   *\n   * @param {number[]} numbers\n   * @param {number} delimeter\n   * @return {number[]}\n   */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "generation_raw": "  const paren_arr = paren_string.split(' ');\n  const result = [];\n  for (let i = 0; i < paren_arr.length; i++) {\n    let max_depth = 0;\n    for (let j = 0; j < paren_arr[i].length; j++) {\n      if (paren_arr[i][j] === '(') {\n        max_depth++;\n      } else {\n        max_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n};\n\n/*\n  Test cases:\n  (()) has maximum two levels of nesting\n  ((())) has maximum three levels of nesting\n  (()((())()()) has maximum four levels of nesting\ngeneration": "  const paren_arr = paren_string.split(' ');\n  const result = [];\n  for (let i = 0; i < paren_arr.length; i++) {\n    let max_depth = 0;\n    for (let j = 0; j < paren_arr[i].length; j++) {\n      if (paren_arr[i][j] === '(') {\n        max_depth++;\n      } else {\n        max_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "generation_raw": "  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => !string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that start with given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that end with given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that are palindromes\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.split('').reverse().join('') === string);\n};\n\n/* Filter an input list of strings only for ones that are anagrams\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc", "generation": "  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => !string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that start with given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that end with given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that are palindromes\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.split('').reverse().join('') === string);\n}"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "generation_raw": "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a list of integers that contains each number of the input list exactly once, and as close to 0 as possible.\n  >>> closestToZero([-1, 2, -3, 4, 5, 6])\n  [-1, 0, -2, 0, 0, 0]\n  >>> closestToZero([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10])\n  [-1, 0, -2, 0, 0, 0, 0, 0, 0, 0]\n  >>> closestToZero([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [-1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst closestToZero = (numbers, int) => {\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    closest.push(Math.abs(numbers[i]));\n  }\n  closest.sort((a, b) => a - b);\n  for (let i = 0; i < numbers.length; i++) {\n    numbers[i] = Math.abs(numbers[i]) - closest[0];\n  }\n  return numbers;\n};\n\n/*\n  Given a list of integers, return a list of integers", "generation": "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a list of integers that contains each number of the input list exactly once, and as close to 0 as possible.\n  >>> closestToZero([-1, 2, -3, 4, 5, 6])\n  [-1, 0, -2, 0, 0, 0]\n  >>> closestToZero([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10])\n  [-1, 0, -2, 0, 0, 0, 0, 0, 0, 0]\n  >>> closestToZero([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [-1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst closestToZero = (numbers, int) => {\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    closest.push(Math.abs(numbers[i]));\n  }\n  closest.sort((a, b) => a - b);\n  for (let i = 0; i < numbers.length; i++) {\n    numbers[i] = Math.abs(numbers[i]) - closest[0];\n  }\n  return numbers;\n}"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "generation_raw": "  const max = [];\n  let maxValue = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    maxValue = Math.max(maxValue, numbers[i]);\n    max.push(maxValue);\n  }\n  return max;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const min = [];\n  let minValue = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    minValue = Math.min(minValue, numbers[i]);\n    min.push(minValue);\n  }\n  return min;\n};\n\n/* From a given list of integers, generate a list of rolling sum of elements found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [3, 5, 8, 10, 13, 17, 19]\n  */\nconst rollingSum = (numbers) => {\n  const sum = [];\n  let sumValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sum.push(sumValue);\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate a list of rolling average of elements found until given moment\n  in the sequence.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2, 2.5, 3, 3, 3.5, 3.5]\n  */\nconst rollingAverage = (numbers) => {\n  const average = [];\n  let sumValue = 0;\n  let count = 0", "generation": "  const max = [];\n  let maxValue = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    maxValue = Math.max(maxValue, numbers[i]);\n    max.push(maxValue);\n  }\n  return max;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const min = [];\n  let minValue = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    minValue = Math.min(minValue, numbers[i]);\n    min.push(minValue);\n  }\n  return min;\n};\n\n/* From a given list of integers, generate a list of rolling sum of elements found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [3, 5, 8, 10, 13, 17, 19]\n  */\nconst rollingSum = (numbers) => {\n  const sum = [];\n  let sumValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sumValue += numbers[i];\n    sum.push(sumValue);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "generation_raw": "  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromeStart = 0;\n  let palindromeEnd = 0;\n  let palindromeStartIndex = 0;\n  let palindromeEndIndex = 0;\n  let palindromeStartLength = 0;\n  let palindromeEndLength = 0;\n  let palindromeStartIndexLength = 0;\n  let palindromeEndIndexLength = 0;\n  let palindromeStartLengthIndex = 0;\n  let palindromeEndLengthIndex = 0;\n  let palindromeStartIndexLengthIndex = 0;\n  let palindromeEndIndexLengthIndex = 0;\n  let palindromeStartLengthIndexIndex = 0;\n  let palindromeEndLengthIndexIndex = 0;\n  let palindromeStartIndexLengthIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;", "generation": "  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromeStart = 0;\n  let palindromeEnd = 0;\n  let palindromeStartIndex = 0;\n  let palindromeEndIndex = 0;\n  let palindromeStartLength = 0;\n  let palindromeEndLength = 0;\n  let palindromeStartIndexLength = 0;\n  let palindromeEndIndexLength = 0;\n  let palindromeStartLengthIndex = 0;\n  let palindromeEndLengthIndex = 0;\n  let palindromeStartIndexLengthIndex = 0;\n  let palindromeEndIndexLengthIndex = 0;\n  let palindromeStartLengthIndexIndex = 0;\n  let palindromeEndLengthIndexIndex = 0;\n  let palindromeStartIndexLengthIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;\n  let palindromeEndLengthIndexIndexIndex = 0;\n  let palindromeStartLengthIndexIndexIndex = 0;"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "generation_raw": "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      ", "generation": "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n/*\n  /* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    }"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "generation_raw": "  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  /*\n  /* Given a list of strings, return the list of strings with duplicates removed.\n  /*\n  /* Example:\n  /*\n  /*   >>> removeDuplicates(['a', 'a', 'a', 'a', 'b', 'c', 'c'])\n  /*   ['a', 'b', 'c']\n  /*\n  /*\n  */\nconst removeDuplicates = (strings) => {\n  let set = new Set();\n  for (let i = 0; i < strings.length; i++) {\n    set.add(strings[i]);\n  }\n  return [...set];\n};\n\n/*\n  /*\n  /* Given a list of strings, return the list of strings with the empty strings removed.\n  /*\n  /* Example:\n  /*\n  /*   >>> removeEmptyStrings(['', 'a', '', 'b'])\n  /*   ['a', 'b']\n  /*\n  */\nconst removeEmptyStrings = (strings) => {\n  let newStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] !== '') {\n      newStrings.push(strings[i]);\n    }\n  }\n  return newStrings;\n};\n\n/*\n  /*\n  /* Given a list of strings, return the list of strings with the strings that contain\n  /* the substring 'bob' removed.\n  /*\n  /* Example:\n  /*\n  /*   >>> removeSubstring('bob', ['bob', 'bobber', 'bobbins', 'bobbing'])\n  /*   ['bobbins', 'bobbing']\n  /*\n  */\nconst removeSubstring = (substring, strings) => {\n  let newStrings = [];\n", "generation": "  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  /*\n  /* Given a list of strings, return the list of strings with duplicates removed.\n  /*\n  /* Example:\n  /*\n  /*   >>> removeDuplicates(['a', 'a', 'a', 'a', 'b', 'c', 'c'])\n  /*   ['a', 'b', 'c']\n  /*\n  /*\n  */\nconst removeDuplicates = (strings) => {\n  let set = new Set();\n  for (let i = 0; i < strings.length; i++) {\n    set.add(strings[i]);\n  }\n  return [...set];\n};\n\n/*\n  /*\n  /* Given a list of strings, return the list of strings with the empty strings removed.\n  /*\n  /* Example:\n  /*\n  /*   >>> removeEmptyStrings(['', 'a', '', 'b'])\n  /*   ['a', 'b']\n  /*\n  */\nconst removeEmptyStrings = (strings) => {\n  let newStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] !== '') {\n      newStrings.push(strings[i]);\n    }\n  }\n  return newStrings;\n}"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "generation_raw": "  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the greatest common multiple of two integers a and b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMultiple(25, 15)\n  300\n  */\nconst greatestCommonMultiple = (a, b) => {\n  return leastCommonMultiple(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the greatest common multiple of two integers a and b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMultiple(25, 15)\n  300\n  */\nconst greatestCommonMultiple = (a, b) => {\n  return leastCommonMultiple(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the greatest common multiple of two integers a and b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMult", "generation": "  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the greatest common multiple of two integers a and b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMultiple(25, 15)\n  300\n  */\nconst greatestCommonMultiple = (a, b) => {\n  return leastCommonMultiple(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the greatest common multiple of two integers a and b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMultiple(25, 15)\n  300\n  */\nconst greatestCommonMultiple = (a, b) => {\n  return leastCommonMultiple(a, b) * greatestCommonDivisor(a, b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  300\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n}"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "generation_raw": "  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'ab']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    suffixes.push(string.slice(-i));\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 1; i <= string.length; i++) {\n    for (let j = 0; j <= string.length - i; j++) {\n      substrings.push(string.slice(j, j + i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from longest to shortest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'bc', 'ab', 'c']\n  */\nconst allSubstringsReverse = (string) => {\n  const substrings = [];\n  for (let i = 1; i <= string.length; i++) {\n    for (let j = 0; j <= string.length - i; j++) {\n      substrings.push(string.slice(j, j + i));\n    }\n  }\n  return substrings.reverse();\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'abc']\n  */\nconst allSub", "generation": "  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'ab']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    suffixes.push(string.slice(-i));\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 1; i <= string.length; i++) {\n    for (let j = 0; j <= string.length - i; j++) {\n      substrings.push(string.slice(j, j + i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from longest to shortest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'bc', 'ab', 'c']\n  */\nconst allSubstringsReverse = (string) => {\n  const substrings = [];\n  for (let i = 1; i <= string.length; i++) {\n    for (let j = 0; j <= string.length - i; j++) {\n      substrings.push(string.slice(j, j + i));\n    }\n  }\n  return substrings.reverse();\n}"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "generation_raw": "  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst", "generation": "  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n}"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "generation_raw": "  const set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    set.add(string[i]);\n  }\n  return set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i], (map.get(string[i]) || 0) + 1);\n  }\n  return map.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i].toLowerCase(), (map.get(string[i].toLowerCase()) || 0) + 1);\n  }\n  return map.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i].toLowerCase(), true);\n  }\n  return map.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('", "generation": "  const set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    set.add(string[i]);\n  }\n  return set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i], (map.get(string[i]) || 0) + 1);\n  }\n  return map.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i].toLowerCase(), (map.get(string[i].toLowerCase()) || 0) + 1);\n  }\n  return map.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    map.set(string[i].toLowerCase(), true);\n  }\n  return map.size;\n}"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "generation_raw": "  let notes = music_string.split(' ');\n  let beats = [];\n  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  The following function is a solution to the problem.\n  It takes a list of integers and returns a string representing musical notes in a special ASCII format.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> printMusic([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  'o o| .| o| o| .| .| .| .| o o'\n  */\nconst printMusic = (beats) => {\n  let notes = [];\n  for (let beat of beats) {\n    if (beat === 4) {\n      notes.push('o');\n    } else if (beat === 2) {\n      notes.push('o|');\n    } else if (beat === 1) {\n      notes.push('.|');\n    }\n  }\n  return notes.join(' ');\n};\n\n/*\n  The following function is a solution to the problem.\n  It takes a list of integers and returns a string representing musical notes in a special ASCII format.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> printMusic([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  'o o| .| o| o| .| .| .| .| o o'\n  */\nconst printMusic = (", "generation": "  let notes = music_string.split(' ');\n  let beats = [];\n  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  The following function is a solution to the problem.\n  It takes a list of integers and returns a string representing musical notes in a special ASCII format.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> printMusic([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  'o o| .| o| o| .| .| .| .| o o'\n  */\nconst printMusic = (beats) => {\n  let notes = [];\n  for (let beat of beats) {\n    if (beat === 4) {\n      notes.push('o');\n    } else if (beat === 2) {\n      notes.push('o|');\n    } else if (beat === 1) {\n      notes.push('.|');\n    }\n  }\n  return notes.join(' ');\n}"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "generation_raw": "  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n};\n\n/*\n  /* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n};\n\n/*\n  /* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n};\n\n/*\n  /* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes", "generation": "  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n};\n\n/*\n  /* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n};\n\n/*\n  /* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    const start = string.indexOf(substring, index);\n    if (start === -1) {\n      break;\n    }\n    count += 1;\n    index = start + 1;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "generation_raw": "  return numbers.split(' ').sort((a, b) => a - b).join(' ')\n}\n\n/*\n  /* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five', true)\n  'five one three'\n  */\nconst sortNumbers = (numbers, reverse) => {\n  return numbers.split(' ').sort((a, b) => b - a).join(' ')\n}\n```\n\n### \ud83d\udcbb \u4ee3\u7801\n\n```javascript\n/**\n * @param {string} numbers\n * @return {string}\n */\nvar sortNumbers = function(numbers) {\n  return numbers.split(' ').sort((a, b) => a - b).join(' ')\n};\n\n/**\n * @param {string} numbers\n * @param {boolean} reverse\n * @return {string}\n */\nvar sortNumbers = function(numbers, reverse) {\n  return numbers.split(' ').sort((a, b) => b - a).join(' ')\n};\n```", "generation": "  return numbers.split(' ').sort((a, b) => a - b).join(' ')\n}\n\n/*\n  /* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five', true)\n  'five one three'\n  */\nconst sortNumbers = (numbers, reverse) => {\n  return numbers.split(' ').sort((a, b) => b - a).join(' ')\n}\n```\n\n### \ud83d\udcbb \u4ee3\u7801\n\n```javascript\n/**\n * @param {string} numbers\n * @return {string}\n */\nvar sortNumbers = function(numbers) {\n  return numbers.split(' ').sort((a, b) => a - b).join(' ')\n};\n\n/**\n * @param {string} numbers\n * @param {boolean} reverse\n * @return {string}\n */\nvar sortNumbers = function(numbers, reverse) {\n  return numbers.split(' ').sort((a, b) => b - a).join(' ')\n}"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "generation_raw": "  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted.slice(0, 2);\n  return closest;\n};\n\n/*\n  Given an array of integers, find the first missing positive integer in linear time and constant space. In other words,\n  find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers\n  as well.\n  >>> firstMissingPositive([3, 4, -1, 1])\n  2\n  >>> firstMissingPositive([1, 2, 0])\n  3\n  >>> firstMissingPositive([2, 1])\n  3\n  >>> firstMissingPositive([1, 2, 3, 4])\n  5\n  >>> firstMissingPositive([-2, -1, 0, 1, 2, 3, 4, 5])\n  6\n  >>> firstMissingPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  11\n  >>> firstMissingPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, ", "generation": "  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted.slice(0, 2);\n  return closest;\n}"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "generation_raw": "  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {", "generation": "  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(n => (n - min) / range);\n}"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "generation_raw": "  return values.filter(value => typeof value === 'number' && value % 1 === 0);\n};\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value === 'string');\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [1, 2, 3], [true, false]]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {true: false}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object' && !Array.isArray(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  []\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), (", "generation": "  return values.filter(value => typeof value === 'number' && value % 1 === 0);\n};\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value === 'string');\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [1, 2, 3], [true, false]]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {true: false}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object' && !Array.isArray(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  []\n  >>> filterTuples([1, 2, 3, 'abc', {}"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* Return the number of times a given letter appears in a given string\n  >>> count_letter('abc', 'a')\n  1\n  >>> count_letter('abc', 'b')\n  1\n  >>> count_letter('abc', 'c')\n  1\n  >>> count_letter('abc', 'd')\n  0\n  */\nconst count_letter = (string, letter) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === letter) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Return the number of times a given letter appears in a given string\n  >>> count_letter_in_string('abc', 'a')\n  1\n  >>> count_letter_in_string('abc', 'b')\n  1\n  >>> count_letter_in_string('abc', 'c')\n  1\n  >>> count_letter_in_string('abc', 'd')\n  0\n  */\nconst count_letter_in_string = (string, letter) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === letter) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Return the number of times a given letter appears in a given string\n  >>> count_letter_in_string_recursive('abc', 'a')\n  1\n  >>> count_letter_in_string_recursive('abc', 'b')\n  1\n  >>> count_letter_in_string_recursive('abc', 'c')\n  1\n  >>> count_letter_in_string_recursive('abc', 'd')\n  0\n  */\nconst count_letter_in_string_recursive = (string, letter) => {\n  if (string.length === 0) {\n    return 0", "generation": "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* Return the number of times a given letter appears in a given string\n  >>> count_letter('abc', 'a')\n  1\n  >>> count_letter('abc', 'b')\n  1\n  >>> count_letter('abc', 'c')\n  1\n  >>> count_letter('abc', 'd')\n  0\n  */\nconst count_letter = (string, letter) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === letter) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Return the number of times a given letter appears in a given string\n  >>> count_letter_in_string('abc', 'a')\n  1\n  >>> count_letter_in_string('abc', 'b')\n  1\n  >>> count_letter_in_string('abc', 'c')\n  1\n  >>> count_letter_in_string('abc', 'd')\n  0\n  */\nconst count_letter_in_string = (string, letter) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === letter) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "generation_raw": "  let largest = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/* For a given number n, find the number of divisors of n\n  >>> divisors(15)\n  3\n  */\nconst divisors = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count + 1;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> sumOfDivisors(15)\n  1 + 3 + 5 + 15 = 21\n  */\nconst sumOfDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> isAbundant(15)\n  true\n  */\nconst isAbundant = (n) => {\n  return sumOfDivisors(n) > n;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> isPerfect(15)\n  false\n  */\nconst isPerfect = (n) => {\n  return sumOfDivisors(n) === n;\n};", "generation": "  let largest = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let smallest = n;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/* For a given number n, find the number of divisors of n\n  >>> divisors(15)\n  3\n  */\nconst divisors = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count + 1;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> sumOfDivisors(15)\n  1 + 3 + 5 + 15 = 21\n  */\nconst sumOfDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> isAbundant(15)\n  true\n  */\nconst isAbundant = (n) => {\n  return sumOfDivisors(n) > n;\n};\n\n/* For a given number n, find the sum of all the divisors of n\n  >>> isPerfect(15)\n  false\n  */\nconst isPerfect = (n) => {\n  return sumOfDivisors(n) === n;\n}"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "generation_raw": "  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/*\n  /* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/*\n  /* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {", "generation": "  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/*\n  /* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/*\n  /* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "generation_raw": "  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }", "generation": "  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }\n  return result;\n};\n\n/*\n  /* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  const result = [];\n  for (const number of numbers) {\n    if (!set.has(number)) {\n      result.push(number);\n      set.add(number);\n    }\n  }"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "generation_raw": "  return string.split('').map(char => char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase()).join('');\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\n\n```js\n/*\n * @lc app=leetcode id=344 lang=javascript\n *\n * [344] Reverse String\n *\n * https://leetcode.com/problems/reverse-string/description/\n *\n * algorithms\n * Medium (48.10%)\n * Total Accepted:    1.3M\n * Total Submissions: 2.6M\n * Testcase Example:  '\"hello\"'\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * Example 1:\n *\n * Input: \"hello\"\n * Output: \"olleh\"\n * Example 2:\n *\n * Input: \"hello world\"\n * Output: \"world hello\"\n * Note:\n *\n * The input string is guaranteed to have length less than 100.\n *\n * Related Topics: String\n *\n *\n */\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseString = function(s) {\n  return s.split('').reverse().join('');\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\u53cc\u6307\u9488\n\n```js\n/*\n * @lc app=leetcode id=344 lang=javascript\n *\n * [344] Reverse String\n *\n * https://leetcode.com/problems/reverse-string/description/\n *\n * algorithms\n * Medium (48.10%)\n * Total Accepted:    1.3M\n * Total Submissions: 2.6M\n * Testcase Example:  '\"hello\"'\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * Example 1:\n *\n * Input: \"hello\"\n * Output: \"olleh\"\n * Example 2:\n *\n * Input: \"hello world\"\n * Output: \"", "generation": "  return string.split('').map(char => char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase()).join('');\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\n\n```js\n/*\n * @lc app=leetcode id=344 lang=javascript\n *\n * [344] Reverse String\n *\n * https://leetcode.com/problems/reverse-string/description/\n *\n * algorithms\n * Medium (48.10%)\n * Total Accepted:    1.3M\n * Total Submissions: 2.6M\n * Testcase Example:  '\"hello\"'\n *\n * Write a function that takes a string as input and returns the string reversed.\n *\n * Example 1:\n *\n * Input: \"hello\"\n * Output: \"olleh\"\n * Example 2:\n *\n * Input: \"hello world\"\n * Output: \"world hello\"\n * Note:\n *\n * The input string is guaranteed to have length less than 100.\n *\n * Related Topics: String\n *\n *\n */\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar reverseString = function(s) {\n  return s.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "generation_raw": "  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/*", "generation": "  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'def'\n  >>> concatenate(['g', 'h', 'i'])\n  'ghij'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "generation_raw": "  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => !string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given character.\n  >>> filterByCharacter([], 'a')\n  []\n  >>> filterByCharacter(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByCharacter = (strings, character) => {\n  return strings.filter(string => string.includes(character));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given character.\n  >>> filterByNotCharacter([], 'a')\n  []\n  >>> filterByNotCharacter(['abc', 'bcd', 'cde', '", "generation": "  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => !string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given character.\n  >>> filterByCharacter([], 'a')\n  []\n  >>> filterByCharacter(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByCharacter = (strings, character) => {\n  return strings.filter(string => string.includes(character));\n}"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "generation_raw": "  return l.filter(x => x > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -3, -10]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -5, -3, -3, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst getNumbers = (l) => {\n  return l.filter(x => !isNaN(x))\n}\n\n/*Return only strings in the list.\n  >>> getStrings([-1, 2, -4, 5, 6])\n  []\n  >>> getStrings([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  ['5', '3', '-5', '2', '-3', '3', '9', '0', '123', '1']\n  */\nconst getStrings = (l) => {\n  return l.filter(x => typeof x === 'string')\n}\n\n/*Return only booleans in the list.\n  >>> getBooleans([-1, 2, -4, 5, 6])\n  []\n  >>> getBooleans([5, 3, -5, 2, -3,", "generation": "  return l.filter(x => x > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -3, -10]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -5, -3, -3, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst getNumbers = (l) => {\n  return l.filter(x => !isNaN(x))\n}\n\n/*Return only strings in the list.\n  >>> getStrings([-1, 2, -4, 5, 6])\n  []\n  >>> getStrings([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  ['5', '3', '-5', '2', '-3', '3', '9', '0', '123', '1']\n  */\nconst getStrings = (l) => {\n  return l.filter(x => typeof x === 'string')\n}"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "generation_raw": "  if (n < 2) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  /*Return the number of prime numbers that are less than or equal to n.\n  >>> countPrimes(10)\n  4\n  >>> countPrimes(0)\n  0\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(100)\n  168\n  >>> countPrimes(1000)\n  1229\n  */\nconst countPrimes = (n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count++;\n  }\n  return count;\n};\n\n/*\n  /*Return the nth prime number.\n  >>> nthPrime(1)\n  2\n  >>> nthPrime(2)\n  3\n  >>> nthPrime(3)\n  5\n  >>> nthPrime(10)\n  29\n  >>> nthPrime(100)\n  541\n  */\nconst nthPrime = (n) => {\n  let count = 0;\n  let prime = 1;\n  while (count < n) {\n    prime = nextPrime(prime);\n    count++;\n  }\n  return prime;\n};\n\n/*\n  /*Return the nth prime number.\n  >>> nthPrime(1)\n  2\n  >>> nthPrime(2)\n  3\n  >>> nthPrime(3)\n  5\n  >>> nthPrime(10)\n  29\n  >>> nthPrime(100)\n  541\n  */\nconst nthPrime = (n) => {\n  let count = 0;\n  let prime = 1;\n  while (count < n) {\n    prime = nextPrime(prime);\n    count++;\n  }\n  return prime", "generation": "  if (n < 2) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  /*Return the number of prime numbers that are less than or equal to n.\n  >>> countPrimes(10)\n  4\n  >>> countPrimes(0)\n  0\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(100)\n  168\n  >>> countPrimes(1000)\n  1229\n  */\nconst countPrimes = (n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count++;\n  }\n  return count;\n};\n\n/*\n  /*Return the nth prime number.\n  >>> nthPrime(1)\n  2\n  >>> nthPrime(2)\n  3\n  >>> nthPrime(3)\n  5\n  >>> nthPrime(10)\n  29\n  >>> nthPrime(100)\n  541\n  */\nconst nthPrime = (n) => {\n  let count = 0;\n  let prime = 1;\n  while (count < n) {\n    prime = nextPrime(prime);\n    count++;\n  }\n  return prime;\n};\n\n/*\n  /*Return the nth prime number.\n  >>> nthPrime(1)\n  2\n  >>> nthPrime(2)\n  3\n  >>> nthPrime(3)\n  5\n  >>> nthPrime(10)\n  29\n  >>> nthPrime(100)\n  541\n  */\nconst nthPrime = (n) => {\n  let count = 0;\n  let prime = 1;\n  while (count < n) {\n    prime = nextPrime(prime);\n    count++;\n  }"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "generation_raw": "  if (xs.length % 2 !== 0) {\n    throw new Error('findZero only takes list xs having even number of coefficients');\n  }\n  if (xs[0] === 0) {\n    throw new Error('findZero only takes list xs having largest non zero coefficient');\n  }\n  const a = xs[0];\n  const b = xs[1];\n  const c = xs[2];\n  const d = xs[3];\n  const e = xs[4];\n  const f = xs[5];\n  const g = xs[6];\n  const h = xs[7];\n  const i = xs[8];\n  const j = xs[9];\n  const k = xs[10];\n  const l = xs[11];\n  const m = xs[12];\n  const n = xs[13];\n  const o = xs[14];\n  const p = xs[15];\n  const q = xs[16];\n  const r = xs[17];\n  const s = xs[18];\n  const t = xs[19];\n  const u = xs[20];\n  const v = xs[21];\n  const w = xs[22];\n  const x = xs[23];\n  const y = xs[24];\n  const z = xs[25];\n  const a1 = a * a;\n  const b1 = b * b;\n  const c1 = c * c;\n  const d1 = d * d;\n  const e1 = e * e;\n  const f1 = f * f;\n  const g1 = g * g;\n  const h1 = h * h;\n  const i1 = i * i;\n  const j1 = j * j;\n  const k1 = k * k;\n  const l1 = l * l;\n  const m1 = m * m;\n  const n1 = n * n;\n  const o1 = o * o;\n  const p1 = p * p;\n  const", "generation": "  if (xs.length % 2 !== 0) {\n    throw new Error('findZero only takes list xs having even number of coefficients');\n  }\n  if (xs[0] === 0) {\n    throw new Error('findZero only takes list xs having largest non zero coefficient');\n  }"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "generation_raw": "  let l1 = l.filter((item, index) => index % 3 !== 0);\n  let l2 = l.filter((item, index) => index % 3 === 0);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  return [...l1, ...l2];\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = l.filter((item, index) => index % 3 !== 0);\n  let l2 = l.filter((item, index) => index % 3 === 0);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  return [...l1, ...l2];\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = l", "generation": "  let l1 = l.filter((item, index) => index % 3 !== 0);\n  let l2 = l.filter((item, index) => index % 3 === 0);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  return [...l1, ...l2];\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = l.filter((item, index) => index % 3 !== 0);\n  let l2 = l.filter((item, index) => index % 3 === 0);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  return [...l1, ...l2];\n}"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "generation_raw": "  return [...new Set(l)];\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  6\n  */\nconst uniqueCount = (l) => {\n  return new Set(l).size;\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst count = (l) => {\n  return l.length;\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUnique = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};", "generation": "  return [...new Set(l)];\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  6\n  */\nconst uniqueCount = (l) => {\n  return new Set(l).size;\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst count = (l) => {\n  return l.length;\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUnique = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n};\n\n/*Return the number of elements in a list\n  >>> count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst countUniqueCount = (l) => {\n  return uniqueCount(l);\n}"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "generation_raw": "  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  157\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in the list.\n  >>> averageElements([1, 2, 3])\n  2\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1.0\n  */\nconst averageElements = (l) => {\n  return sumElements(l) / l.length;\n};\n\n/*Return sum of squares of all elements in the list.\n  >>> sumOfSquares([1, 2, 3])\n  14\n  >>> sumOfSquares([5, 3, -5, 2, -3, 3, 9, 0, ", "generation": "  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  157\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in the list.\n  >>> averageElements([1, 2, 3])\n  2\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1.0\n  */\nconst averageElements = (l) => {\n  return sumElements(l) / l.length;\n}"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n```", "generation": "  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "generation_raw": "  let l1 = l.slice(0, l.length);\n  let l2 = l.slice(1, l.length);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  let l3 = [];\n  for (let i = 0; i < l1.length; i++) {\n    l3.push(l1[i]);\n    l3.push(l2[i]);\n  }\n  return l3;\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let l1 = l.slice(0, l.length);\n  let l2 = l.slice(1, l.length);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  let l3 = [];\n  for (let i = 0; i < l1.length; i++) {\n    l3.push(l2[i]);\n    l3.push(l1[i]);\n  }\n  return l3;\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst", "generation": "  let l1 = l.slice(0, l.length);\n  let l2 = l.slice(1, l.length);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  let l3 = [];\n  for (let i = 0; i < l1.length; i++) {\n    l3.push(l1[i]);\n    l3.push(l2[i]);\n  }\n  return l3;\n};\n\n/*\n  /*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let l1 = l.slice(0, l.length);\n  let l2 = l.slice(1, l.length);\n  l1.sort((a, b) => a - b);\n  l2.sort((a, b) => a - b);\n  let l3 = [];\n  for (let i = 0; i < l1.length; i++) {\n    l3.push(l2[i]);\n    l3.push(l1[i]);\n  }\n  return l3;\n}"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "generation_raw": "  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCycl", "generation": "  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "generation_raw": "  let fib = 1;\n  let fibPrev = 1;\n  let fibPrevPrev = 1;\n  let fibNum = 0;\n  let fibNumPrev = 0;\n  let fibNumPrevPrev = 0;\n  let fibNumPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrev", "generation": "  let fib = 1;\n  let fibPrev = 1;\n  let fibPrevPrev = 1;\n  let fibNum = 0;\n  let fibNumPrev = 0;\n  let fibNumPrevPrev = 0;\n  let fibNumPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = 0;\n  let fibNumPrevPrevPrevPrevPrev"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "generation_raw": "  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          set.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return set.size > 0;\n};\n\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // false\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // true\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // false\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // true\nconsole.log(triplesSumToZero([1])); // false\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let", "generation": "  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          set.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return set.size > 0;\n}"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j && i !== j) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(carRaceCollision(10));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j && i !== j) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(carRaceCollision(10));\n```\n\n### \u89e3\u6cd5\u4e09\n\n```js\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if", "generation": "  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j && i !== j) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(carRaceCollision(10));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j && i !== j) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "generation_raw": "  return l.map((item, index) => item + 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((item, index) => item + 1);\n};\n```", "generation": "  return l.map((item, index) => item + 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((item, index) => item + 1);\n}"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "generation_raw": "  const map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    const diff = l[i] * -1;\n    if (map.has(diff)) {\n      return true;\n    }\n    map.set(l[i], i);\n  }\n  return false;\n};\n\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // false\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // false\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // false\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // true\nconsole.log(pairsSumToZero([1])); // false\n```\n\n### \ud83d\udcd1 \u89e3\u9898\u601d\u8def\n\n**\u53cc\u6307\u9488**\n\n1. \u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n2. \u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5934\u90e8\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5c3e\u90e8\n3. \u5224\u65ad\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u4e4b\u548c\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8fd4\u56detrue\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5219\u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\uff0c\u5982\u679c\u5c0f\u4e8e0\uff0c\u5219\u5934\u6307\u9488\u5411\u540e\u79fb\u52a8\n4. \u76f4\u5230\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488\u76f8\u9047\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56defalse\n\n### \ud83d\udcc6 \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n\n### \ud83d\udcbb \u4ee3\u7801\n\n```js\nconst pairsSumToZero = (l) => {\n  const len = l.length;\n  l.sort((a, b) => a - b);\n  let [i, j] = [0, len - 1];\n  while (i < j) {\n    const sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    } else if (sum > 0) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return false;\n};\n\nconsole.log(pairsSumToZero([1, 3,", "generation": "  const map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    const diff = l[i] * -1;\n    if (map.has(diff)) {\n      return true;\n    }\n    map.set(l[i], i);\n  }\n  return false;\n};\n\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // false\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // false\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // false\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // true\nconsole.log(pairsSumToZero([1])); // false\n```\n\n### \ud83d\udcd1 \u89e3\u9898\u601d\u8def\n\n**\u53cc\u6307\u9488**\n\n1. \u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n2. \u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5934\u90e8\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5c3e\u90e8\n3. \u5224\u65ad\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u4e4b\u548c\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8fd4\u56detrue\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5219\u5c3e\u6307\u9488\u5411\u524d\u79fb\u52a8\uff0c\u5982\u679c\u5c0f\u4e8e0\uff0c\u5219\u5934\u6307\u9488\u5411\u540e\u79fb\u52a8\n4. \u76f4\u5230\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488\u76f8\u9047\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56defalse\n\n### \ud83d\udcc6 \u65f6\u95f4\u590d\u6742\u5ea6 O(n)\n\n### \ud83d\udcbb \u4ee3\u7801\n\n```js\nconst pairsSumToZero = (l) => {\n  const len = l.length;\n  l.sort((a, b) => a - b);\n  let [i, j] = [0, len - 1];\n  while (i < j) {\n    const sum = l[i] + l[j];\n    if (sum === 0) {\n      return true;\n    } else if (sum > 0) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "generation_raw": "  let res = '';\n  while (x > 0) {\n    res = (x % base) + res;\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n```", "generation": "  let res = '';\n  while (x > 0) {\n    res = (x % base) + res;\n    x = Math.floor(x / base);\n  }\n  return res;\n}"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "generation_raw": "  return a * h / 2;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === target) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map[diff] !== undefined) {\n      count += map[diff];\n    }\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n  return count;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map[diff] !== undefined) {\n      count += map[diff];\n    }\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n  return count;\n};\n\n/*G", "generation": "  return a * h / 2;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === target) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map[diff] !== undefined) {\n      count += map[diff];\n    }\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n  return count;\n};\n\n/*Given a list of numbers and a target number, return the number of pairs of numbers that sum to the target.\n  >>> sumOfTwo([1, 2, 3, 4, 5], 3)\n  2\n  */\nconst sumOfTwo = (arr, target) => {\n  let count = 0;\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map[diff] !== undefined) {\n      count += map[diff];\n    }\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "generation_raw": "  if (n < 0) {\n    return -1;\n  }\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let fib4 = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i - 4) % 4];\n  }\n  return fib4[n % 4];\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\nconsole.log(fib4(8));\nconsole.log(fib4(9));\nconsole.log(fib4(10));\nconsole.log(fib4(11));\nconsole.log(fib4(12));\nconsole.log(fib4(13));\nconsole.log(fib4(14));\nconsole.log(fib4(15));\nconsole.log(fib4(16));\nconsole.log(fib4(17));\nconsole.log(fib4(18));\nconsole.log(fib4(19));\nconsole.log(fib4(20));\nconsole.log(fib4(21));\nconsole.log(fib4(22));\nconsole.log(fib4(23));\nconsole.log(fib4(24));\nconsole.log(fib4(25));\nconsole.log(fib4(26));\nconsole.log(fib4(27));\nconsole.log(fib4(28));\nconsole.log(fib4(29));\nconsole.log(fib4(30));\nconsole.log(f", "generation": "  if (n < 0) {\n    return -1;\n  }\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let fib4 = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i - 4) % 4];\n  }\n  return fib4[n % 4];\n}"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "generation_raw": "  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((", "generation": "  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n}"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "generation_raw": "  const lowerText = text.toLowerCase();\n  const reversedText = lowerText.split('').reverse().join('');\n  return lowerText === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const lowerText = text.toLowerCase();\n  const reversedText = lowerText.split('').reverse().join('');\n  return lowerText === reversedText;\n};\n```", "generation": "  const lowerText = text.toLowerCase();\n  const reversedText = lowerText.split('').reverse().join('');\n  return lowerText === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const lowerText = text.toLowerCase();\n  const reversedText = lowerText.split('').reverse().join('');\n  return lowerText === reversedText;\n}"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "generation_raw": "  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n};\n\n/*\n  /*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n};\n\n/*\n  /*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n};\n\n/*\n  /*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n", "generation": "  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n};\n\n/*\n  /*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n};\n\n/*\n  /*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = (res * p) % p;\n    }\n    p = (p * p) % p;\n    n = n >> 1;\n  }\n  return res;\n}"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "generation_raw": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeAffine = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) * 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_affine function. Returns decoded string.\n  */\nconst decodeAffine = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) * 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeRailFence = (s) => {\n  return s.split(\"\").map((ch, i) => {\n    if (i % 2 === 0) {\n      return String.fromCharCode(\n        ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n      );\n    } else {\n      return String.fromCharCode(\n        ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n      );\n    }\n  }).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rail_fence function. Returns decoded string.\n  */\nconst decodeRailFence = (s) => {\n  return s.split(\"\").map((ch, i) =>", "generation": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeAffine = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) * 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_affine function. Returns decoded string.\n  */\nconst decodeAffine = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) * 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeRailFence = (s) => {\n  return s.split(\"\").map((ch, i) => {\n    if (i % 2 === 0) {\n      return String.fromCharCode(\n        ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n      );\n    } else {\n      return String.fromCharCode(\n        ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n      );\n    }\n  }).join(\"\");\n}"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "generation_raw": "  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\n\n```js\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1asplit + filter\n\n```js\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', '", "generation": "  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\n\n```js\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "generation_raw": "  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between lower and upper thresholds.\n  >>> betweenThresholds([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThresholds([1, 2, 4, 10], 1, 5)\n  false\n  */\nconst betweenThresholds = (l, lower, upper) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < lower || l[i] > upper) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between lower and upper thresholds.\n  >>> betweenThresholds([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThresholds([1, 2, 4, 10], 1, 5)\n  false\n  */\nconst betweenThresholds = (l, lower, upper) => {\n  for (let i = 0", "generation": "  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between lower and upper thresholds.\n  >>> betweenThresholds([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThresholds([1, 2, 4, 10], 1, 5)\n  false\n  */\nconst betweenThresholds = (l, lower, upper) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < lower || l[i] > upper) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "generation_raw": "  return x + y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  0.7142857142857143\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Square a number x\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Cube a number x\n  >>> cube(2)\n  8\n  >>> cube(5)\n  125\n  */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*Raise x to the power y\n  >>> power(2, 3)\n  8\n  >>> power(5, 2)\n  25\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Return the absolute value of x\n  >>> absoluteValue(-2)\n  2\n  >>> absoluteValue(2)\n  2\n  */\nconst absoluteValue = (x) => {\n  return Math.abs(x);\n};\n\n/*Return the factorial of x\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  */\nconst factorial = (x) => {\n  return Math", "generation": "  return x + y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  0.7142857142857143\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Square a number x\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Cube a number x\n  >>> cube(2)\n  8\n  >>> cube(5)\n  125\n  */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*Raise x to the power y\n  >>> power(2, 3)\n  8\n  >>> power(5, 2)\n  25\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Return the absolute value of x\n  >>> absoluteValue(-2)\n  2\n  >>> absoluteValue(2)\n  2\n  */\nconst absoluteValue = (x) => {\n  return Math.abs(x);\n}"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "generation_raw": "  const s0Arr = s0.split('');\n  const s1Arr = s1.split('');\n  const s0Len = s0Arr.length;\n  const s1Len = s1Arr.length;\n  if (s0Len !== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0Arr[i] !== s1Arr[i]) return false;\n  }\n  return true;\n};\n```", "generation": "  const s0Arr = s0.split('');\n  const s1Arr = s1.split('');\n  const s0Len = s0Arr.length;\n  const s1Len = s1Arr.length;\n  if (s0Len !== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0Arr[i] !== s1Arr[i]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "generation_raw": "  if (n === 1) return 1;\n  if (n === 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i =", "generation": "  if (n === 1) return 1;\n  if (n === 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n};\n\n/*\n  /*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n}"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "generation_raw": "  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if every opening bracket has a\n  corresponding closing bracket.\n\n  >>> hasCorrespondingBracket(\"<>\")\n  true\n  >>> hasCorrespondingBracket(\"<\")\n  false\n  >>> hasCorrespondingBracket(\"<><\")\n  false\n  >>> hasCorrespondingBracket(\"<><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><><><\");\n  true\n*/\nconst hasCorrespondingBracket = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if every opening bracket has a\n  corresponding closing bracket.\n", "generation": "  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if every opening bracket has a\n  corresponding closing bracket.\n\n  >>> hasCorrespondingBracket(\"<>\")\n  true\n  >>> hasCorrespondingBracket(\"<\")\n  false\n  >>> hasCorrespondingBracket(\"<><\")\n  false\n  >>> hasCorrespondingBracket(\"<><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><><\")\n  false\n  >>> hasCorrespondingBracket(\"<><><><><><>\")\n  true\n  >>> hasCorrespondingBracket(\"<><><><><><><\");\n  true\n*/\nconst hasCorrespondingBracket = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "generation_raw": "  let flag = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n```\n\n### \u89e3\u9898\u601d\u8def\n\n- \u89e3\u6cd5\u4e00\uff1a\n  - \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56defalse\n- \u89e3\u6cd5\u4e8c\uff1a\n  - \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3atrue\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65adflag\u662f\u5426\u4e3atrue\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56defalse\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3afalse\n\n### \u4ee3\u7801\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\n/*\n  \u89e3\u6cd5\u4e00\uff1a\n  \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56defalse\n*/\nvar increasingTriplet = function (nums) {\n  let flag = false;\n  for (let i = 0; i < nums.length - 1; i++) {\n    if (nums[i] < nums[i + 1]) {\n      flag = true;\n    } else {\n      return flag;\n    }\n  }\n  return flag;\n};\n\n/*\n  \u89e3\u6cd5\u4e8c\uff1a\n  \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3atrue\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65adflag\u662f\u5426\u4e3atrue\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56defalse\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3afalse\n*/\nvar increasingTriplet = function (nums) {\n  let flag = false;\n  for (let i = 0; i < nums.length - 1; i++) {\n    if (nums[i] < nums[i + 1]) {\n      flag = true;\n    } else {\n      flag = false;\n    }\n    if (flag && i > 0 && nums[i] < nums[i - 1]) {\n      return true;\n    }\n  ", "generation": "  let flag = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n```\n\n### \u89e3\u9898\u601d\u8def\n\n- \u89e3\u6cd5\u4e00\uff1a\n  - \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56defalse\n- \u89e3\u6cd5\u4e8c\uff1a\n  - \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3atrue\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65adflag\u662f\u5426\u4e3atrue\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56defalse\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3afalse\n\n### \u4ee3\u7801\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\n/*\n  \u89e3\u6cd5\u4e00\uff1a\n  \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56defalse\n*/\nvar increasingTriplet = function (nums) {\n  let flag = false;\n  for (let i = 0; i < nums.length - 1; i++) {\n    if (nums[i] < nums[i + 1]) {\n      flag = true;\n    } else {\n      return flag;\n    }\n  }\n  return flag;\n};\n\n/*\n  \u89e3\u6cd5\u4e8c\uff1a\n  \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3atrue\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5224\u65adflag\u662f\u5426\u4e3atrue\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56defalse\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5c06flag\u8bbe\u7f6e\u4e3afalse\n*/\nvar increasingTriplet = function (nums) {\n  let flag = false;\n  for (let i = 0; i < nums.length - 1; i++) {\n    if (nums[i] < nums[i + 1]) {\n      flag = true;\n    } else {\n      flag = false;\n    }\n    if (flag && i > 0 && nums[i] < nums[i - 1]) {\n      return true;\n    }"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "generation_raw": "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set(l1.filter(x => set2.has(x)));\n  return [...set3];\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u53cc\u6307\u9488\n\n```js\n/*\n  /*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set();\n  l1.forEach(x => {\n    if (set2.has(x)) {\n      set3.add(x);\n    }\n  });\n  return [...set3];\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\u53cc\u6307\u9488\n\n```js\n/*\n  /*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set();\n  l1.forEach(x => {\n    if (set2.has(x)) {\n      set3.add(x);\n    }\n  });\n  return [...set3];\n};", "generation": "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set(l1.filter(x => set2.has(x)));\n  return [...set3];\n};\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\u53cc\u6307\u9488\n\n```js\n/*\n  /*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set();\n  l1.forEach(x => {\n    if (set2.has(x)) {\n      set3.add(x);\n    }\n  });\n  return [...set3];\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\u53cc\u6307\u9488\n\n```js\n/*\n  /*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set();\n  l1.forEach(x => {\n    if (set2.has(x)) {\n      set3.add(x);\n    }\n  });\n  return [...set3];\n}"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "generation_raw": "  let largest = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      largest = Math.max(largest, i);\n    }\n  }\n  return largest;\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\n\n```js\n/*\n * @lc app=leetcode id=343 lang=javascript\n *\n * [343] Integer Break\n *\n * https://leetcode.com/problems/integer-break/description/\n *\n * algorithms\n * Medium (48.10%)\n * Total Accepted:    1.1M\n * Total Submissions: 2.3M\n * Testcase Example:  '3'\n *\n * Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n *\n * Example 1:\n *\n * Input: 2\n * Output: 1\n * Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n *\n * Example 2:\n *\n * Input: 10\n * Output: 36\n * Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n * Note: You may assume that n is not less than 2 and not larger than 58.\n *\n */\n/**\n * @param {number} n\n * @return {number}\n */\nconst integerBreak = (n) => {\n  if (n <= 3) return 1 * (n - 1);\n  if (n % 3 === 0) return 3 ** (n / 3);\n  if (n % 3 === 1) return 4 * (3 ** ((n - 4) / 3));\n  return 2 * (3 ** ((n - 2) / 3));\n};\n```\n\n### \u89e3\u6cd5\u56db\uff1a\n\n```js\n/*\n * @lc app=leetcode id=343 lang=javascript\n *\n * [3", "generation": "  let largest = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      largest = Math.max(largest, i);\n    }\n  }\n  return largest;\n};\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\n\n```js\n/*\n * @lc app=leetcode id=343 lang=javascript\n *\n * [343] Integer Break\n *\n * https://leetcode.com/problems/integer-break/description/\n *\n * algorithms\n * Medium (48.10%)\n * Total Accepted:    1.1M\n * Total Submissions: 2.3M\n * Testcase Example:  '3'\n *\n * Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n *\n * Example 1:\n *\n * Input: 2\n * Output: 1\n * Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n *\n * Example 2:\n *\n * Input: 10\n * Output: 36\n * Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n * Note: You may assume that n is not less than 2 and not larger than 58.\n *\n */\n/**\n * @param {number} n\n * @return {number}\n */\nconst integerBreak = (n) => {\n  if (n <= 3) return 1 * (n - 1);\n  if (n % 3 === 0) return 3 ** (n / 3);\n  if (n % 3 === 1) return 4 * (3 ** ((n - 4) / 3));\n  return 2 * (3 ** ((n - 2) / 3));\n}"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  The sum of the first n natural numbers is n(n+1)/2.\n  >>> sumOfNaturalNumbers(30)\n  465\n  >>> sumOfNaturalNumbers(100)\n  5050\n  >>> sumOfNaturalNumbers(5)\n  15\n  >>> sumOfNaturalNumbers(10)\n  55\n  >>> sumOfNaturalNumbers(1)\n  1\n  */\nconst sumOfNaturalNumbers = (n) => {\n  return n * (n + 1) / 2;\n};\n\n/*\n  The sum of the squares of the first n natural numbers is n(n+1)(2n+1)/6.\n  >>> sumOfSquaresOfNaturalNumbers(30)\n  2704\n  >>> sumOfSquaresOfNaturalNumbers(100)\n  25164150\n  >>> sumOfSquaresOfNaturalNumbers(5)\n  125\n  >>> sumOfSquaresOfNaturalNumbers(10)\n  225\n  >>> sumOfSquaresOfNaturalNumbers(1)\n  1\n  */\nconst sumOfSquaresOfNaturalNumbers = (n) => {\n  return n * (n + 1) * (2 * n + 1) / 6;\n};\n\n/*\n  The sum of the cubes of the first n natural numbers is n(n+1)(2n+1)/4.\n  >>> sumOfCubesOfNaturalNumbers(30)\n  2704\n  >>> sumOfCubesOfNaturalNumbers(100)\n  25164150\n  >>> sumOfCubesOfNaturalNumbers(5)\n  125\n  >>> sumOfCubesOfNaturalNumbers(10)\n  225\n  >>> sumOfCubesOfNaturalNumbers(1", "generation": "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  The sum of the first n natural numbers is n(n+1)/2.\n  >>> sumOfNaturalNumbers(30)\n  465\n  >>> sumOfNaturalNumbers(100)\n  5050\n  >>> sumOfNaturalNumbers(5)\n  15\n  >>> sumOfNaturalNumbers(10)\n  55\n  >>> sumOfNaturalNumbers(1)\n  1\n  */\nconst sumOfNaturalNumbers = (n) => {\n  return n * (n + 1) / 2;\n};\n\n/*\n  The sum of the squares of the first n natural numbers is n(n+1)(2n+1)/6.\n  >>> sumOfSquaresOfNaturalNumbers(30)\n  2704\n  >>> sumOfSquaresOfNaturalNumbers(100)\n  25164150\n  >>> sumOfSquaresOfNaturalNumbers(5)\n  125\n  >>> sumOfSquaresOfNaturalNumbers(10)\n  225\n  >>> sumOfSquaresOfNaturalNumbers(1)\n  1\n  */\nconst sumOfSquaresOfNaturalNumbers = (n) => {\n  return n * (n + 1) * (2 * n + 1) / 6;\n}"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "generation_raw": "  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.pop() !== \"(\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if the brackets are balanced,\n  otherwise return false.\n\n  >>> balancedBrackets(\"()\")\n  true\n  >>> balancedBrackets(\"()()\")\n  true\n  >>> balancedBrackets(\"(()())\")\n  true\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"(()\")\n  false\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"((()\")\n  false\n  >>> balancedBrackets(\"((()())())\")\n  false\n  >>> balancedBrackets(\"((()())())()\");\n  false\n*/\nconst balancedBrackets = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \"[\" || brackets[i] === \"{\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.pop() !== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if the brackets are balanced,\n  otherwise return false.\n\n  >>> balancedBrackets(\"()\")\n  true\n  >>> balancedBrackets(\"()()\")\n  true\n  >>> balancedBrackets(\"(()())\");\n  true\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"(()\")\n  false\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"((()\")\n  false\n  >>> balancedBrackets", "generation": "  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.pop() !== \"(\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string of brackets, return true if the brackets are balanced,\n  otherwise return false.\n\n  >>> balancedBrackets(\"()\")\n  true\n  >>> balancedBrackets(\"()()\")\n  true\n  >>> balancedBrackets(\"(()())\")\n  true\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"(()\")\n  false\n  >>> balancedBrackets(\")(\")\n  false\n  >>> balancedBrackets(\"((()\")\n  false\n  >>> balancedBrackets(\"((()())())\")\n  false\n  >>> balancedBrackets(\"((()())())()\");\n  false\n*/\nconst balancedBrackets = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \"[\" || brackets[i] === \"{\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.pop() !== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "generation_raw": "  const n = xs.length;\n  const dxs = new Array(n);\n  for (let i = 0; i < n; i++) {\n    if (i === 0) {\n      dxs[i] = 0;\n    } else if (i === 1) {\n      dxs[i] = xs[i];\n    } else {\n      dxs[i] = xs[i] * i;\n    }\n  }\n  return dxs;\n};\n\n/*\n  /*\n   * Given a polynomial represented by its coefficients,\n   * return the value of this polynomial at the given point.\n   *\n   * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   *\n   * >>> value([3, 1, 2, 4, 5], 1)\n   * 11\n   * >>> value([1, 2, 3], 1)\n   * 6\n   * >>> value([1, 2, 3], 2)\n   * 10\n   * */\nconst value = (xs, x) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  /*\n   * Given a polynomial represented by its coefficients,\n   * return the value of this polynomial at the given point.\n   *\n   * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   *\n   * >>> value([3, 1, 2, 4, 5], 1)\n   * 11\n   * >>> value([1, 2, 3], 1)\n   * 6\n   * >>> value([1, 2, 3], 2)\n   * 10\n   * */\nconst value = (xs, x) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    ", "generation": "  const n = xs.length;\n  const dxs = new Array(n);\n  for (let i = 0; i < n; i++) {\n    if (i === 0) {\n      dxs[i] = 0;\n    } else if (i === 1) {\n      dxs[i] = xs[i];\n    } else {\n      dxs[i] = xs[i] * i;\n    }\n  }\n  return dxs;\n};\n\n/*\n  /*\n   * Given a polynomial represented by its coefficients,\n   * return the value of this polynomial at the given point.\n   *\n   * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   *\n   * >>> value([3, 1, 2, 4, 5], 1)\n   * 11\n   * >>> value([1, 2, 3], 1)\n   * 6\n   * >>> value([1, 2, 3], 2)\n   * 10\n   * */\nconst value = (xs, x) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * Math.pow(x, i);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "generation_raw": "  if (n < 2) return 0;\n  if (n === 2) return 1;\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n - 1];\n};\n\n/*\n  /*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  if (n === 2) return 1;\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n - 1];\n};\n\n/*\n  /*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n", "generation": "  if (n < 2) return 0;\n  if (n === 2) return 1;\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n - 1];\n};\n\n/*\n  /*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  if (n === 2) return 1;\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n - 1];\n}"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n```", "generation": "  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "generation_raw": "  const digits = String(x).split('');\n  const result = digits.slice(shift).concat(digits.slice(0, shift));\n  return result.join('');\n};\n\n/*\n  /*\n  * Reverse the digits of the integer x, return the result as a string.\n  * If the integer has more than k digits, return the first k digits reversed.\n  * >>> reverseDigits(1234567890, 3)\n  * \"7890654321\"\n  */\nconst reverseDigits = (x, k) => {\n  const digits = String(x).split('');\n  const result = digits.slice().reverse();\n  return result.slice(0, k).join('');\n};\n\n/*\n  /*\n  * Return the sum of the digits of the integer x.\n  * >>> sumDigits(1234567890)\n  * 45\n  */\nconst sumDigits = x => {\n  const digits = String(x).split('');\n  return digits.reduce((acc, cur) => acc + +cur, 0);\n};\n\n/*\n  /*\n  * Return the sum of the digits of the integer x,\n  * but only add the digits that are greater than the digit at the same index in the integer x.\n  * >>> sumOfGreaterDigits(1234567890, 3)\n  * 15\n  */\nconst sumOfGreaterDigits = (x, k) => {\n  const digits = String(x).split('');\n  const result = digits.map((digit, index) => {\n    if (+digit > +digits[index + k]) {\n      return +digit;\n    }\n    return 0;\n  });\n  return result.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*\n  /*\n  * Return the sum of the digits of the integer x,\n  * but only add the digits that are less than the digit at the same index in the integer x.\n  * >>> sumOfLessDigits(123456", "generation": "  const digits = String(x).split('');\n  const result = digits.slice(shift).concat(digits.slice(0, shift));\n  return result.join('');\n};\n\n/*\n  /*\n  * Reverse the digits of the integer x, return the result as a string.\n  * If the integer has more than k digits, return the first k digits reversed.\n  * >>> reverseDigits(1234567890, 3)\n  * \"7890654321\"\n  */\nconst reverseDigits = (x, k) => {\n  const digits = String(x).split('');\n  const result = digits.slice().reverse();\n  return result.slice(0, k).join('');\n};\n\n/*\n  /*\n  * Return the sum of the digits of the integer x.\n  * >>> sumDigits(1234567890)\n  * 45\n  */\nconst sumDigits = x => {\n  const digits = String(x).split('');\n  return digits.reduce((acc, cur) => acc + +cur, 0);\n};\n\n/*\n  /*\n  * Return the sum of the digits of the integer x,\n  * but only add the digits that are greater than the digit at the same index in the integer x.\n  * >>> sumOfGreaterDigits(1234567890, 3)\n  * 15\n  */\nconst sumOfGreaterDigits = (x, k) => {\n  const digits = String(x).split('');\n  const result = digits.map((digit, index) => {\n    if (+digit > +digits[index + k]) {\n      return +digit;\n    }\n    return 0;\n  });\n  return result.reduce((acc, cur) => acc + cur, 0);\n}"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst lowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters that are not'\n  uppercase.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst nonUpperSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters that are not'", "generation": "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst lowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters that are not'\n  uppercase.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst nonUpperSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() !== s[i]) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "generation_raw": "  const [apples, oranges] = s.split(' and ').map(x => parseInt(x.split(' ')[0]));\n  return n - apples - oranges;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n```\n\n### \ud83d\udcdd Test Cases\n\n```\nfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n```\n\n### \ud83d\udcfa Validation\n\n```\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); // 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); // 19\n```\n\n### \u26a0\ufe0f Invalid Test Cases\n\n```\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); // 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\nconsole.log(fruitDistribution(\"100 apples", "generation": "  const [apples, oranges] = s.split(' and ').map(x => parseInt(x.split(' ')[0]));\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "generation_raw": "  let even = [];\n  let odd = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even.push(arr[i]);\n    } else {\n      odd.push(arr[i]);\n    }\n  }\n  if (even.length === 0) {\n    return [];\n  }\n  if (even.length === 1) {\n    return [even[0], 0];\n  }\n  let min = Math.min(...even);\n  let minIndex = even.indexOf(min);\n  return [min, minIndex];\n};\n```", "generation": "  let even = [];\n  let odd = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      even.push(arr[i]);\n    } else {\n      odd.push(arr[i]);\n    }\n  }\n  if (even.length === 0) {\n    return [];\n  }\n  if (even.length === 1) {\n    return [even[0], 0];\n  }\n  let min = Math.min(...even);\n  let minIndex = even.indexOf(min);\n  return [min, minIndex];\n}"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "generation_raw": "  let max = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (lst[i] > freq) {\n        max = lst[i];\n        freq = lst[i];\n      } else if (lst[i] === freq) {\n        max = lst[i];\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (lst[i] > freq) {\n        max = lst[i];\n        freq = lst[i];\n      } else if (lst[i] === freq) {\n        max = lst[i];\n      }\n    }\n  }\n  ", "generation": "  let max = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (lst[i] > freq) {\n        max = lst[i];\n        freq = lst[i];\n      } else if (lst[i] === freq) {\n        max = lst[i];\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (lst[i] > freq) {\n        max = lst[i];\n        freq = lst[i];\n      } else if (lst[i] === freq) {\n        max = lst[i];\n      }\n    }\n  }"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "generation_raw": "  if (lst.length === 0) return [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIdx = 0;\n  let maxIdx = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIdx = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  lst.splice(minIdx, 1);\n  lst.splice(maxIdx, 1);\n  return [min, ...strangeSortList(lst), max];\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34", "generation": "  if (lst.length === 0) return [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIdx = 0;\n  let maxIdx = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIdx = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  lst.splice(minIdx, 1);\n  lst.splice(maxIdx, 1);\n  return [min, ...strangeSortList(lst), max];\n}"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "generation_raw": "  if (a + b > c && a + c > b && b + c > a) {\n    return Math.sqrt(\n      (a * a + b * b - c * c) / 2 * (a * a + b * b + c * c) / 2\n    );\n  }\n  return -1;\n};\n\nconsole.log(triangleArea(3, 4, 5));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 3));\nconsole.log(triangleArea(1, 1, 1));\nconsole.log(triangleArea(1, 2, 3));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(", "generation": "  if (a + b > c && a + c > b && b + c > a) {\n    return Math.sqrt(\n      (a * a + b * b - c * c) / 2 * (a * a + b * b + c * c) / 2\n    );\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "generation_raw": "  const isPalindrome = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i] !== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const sum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  };\n  if (sum(q) > w) {\n    return false;\n  }\n  return isPalindrome(q);\n};\n\nconsole.log(willItFly([1, 2], 5)); // false\nconsole.log(willItFly([3, 2, 3], 1)); // false\nconsole.log(willItFly([3, 2, 3], 9)); // true\nconsole.log(willItFly([3], 5)); // true\n```", "generation": "  const isPalindrome = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i] !== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const sum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  };\n  if (sum(q) > w) {\n    return false;\n  }\n  return isPalindrome(q);\n}"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "generation_raw": "  let count = 0;\n  let isPalindrome = false;\n  let i = 0;\n  let j = arr.length - 1;\n\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      i++;\n      j--;\n    } else {\n      if (isPalindrome) {\n        count++;\n        isPalindrome = false;\n      } else {\n        count += 2;\n        isPalindrome = true;\n      }\n    }\n  }\n\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // 1\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 0\nconsole.log(smallestChange([1, 1, 1, 1, 1])); // 0\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 0\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 1\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 2\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 3\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // 4\nconsole.log(smallestChange([1, 2, 3,", "generation": "  let count = 0;\n  let isPalindrome = false;\n  let i = 0;\n  let j = arr.length - 1;\n\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      i++;\n      j--;\n    } else {\n      if (isPalindrome) {\n        count++;\n        isPalindrome = false;\n      } else {\n        count += 2;\n        isPalindrome = true;\n      }\n    }\n  }\n\n  return count;\n}"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "generation_raw": "  if (lst1.length > lst2.length) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n```", "generation": "  if (lst1.length > lst2.length) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "generation_raw": "  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiply = false;\n  for (let i = 2; i < a; i++) {", "generation": "  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiply = false;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isMultiply = true;\n      break;\n    }\n  }\n  return isMultiply;\n}"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "generation_raw": "  return x === n ** Math.floor(Math.log(x) / Math.log(n));\n};\n\n/*\n  The following solution is based on the fact that:\n  x = n ** int\n  log(x) = int * log(n)\n  log(x) / log(n) = int\n  int = log(x) / log(n)\n  int is an integer\n*/\nconst isSimplePower = (x, n) => {\n  return (\n    x === n ** Math.floor(Math.log(x) / Math.log(n)) &&\n    Math.log(x) / Math.log(n) % 1 === 0\n  );\n};\n```", "generation": "  return x === n ** Math.floor(Math.log(x) / Math.log(n));\n};\n\n/*\n  The following solution is based on the fact that:\n  x = n ** int\n  log(x) = int * log(n)\n  log(x) / log(n) = int\n  int = log(x) / log(n)\n  int is an integer\n*/\nconst isSimplePower = (x, n) => {\n  return (\n    x === n ** Math.floor(Math.log(x) / Math.log(n)) &&\n    Math.log(x) / Math.log(n) % 1 === 0\n  );\n}"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "generation_raw": "  let num = Math.floor(a ** (1/3));\n  return num ** 3 === a;\n};\n\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // true\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let num = Math.floor(a ** (1/3));\n  return num ** 3 === a;\n};\n\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // true\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\n```\n\n### \u89e3\u6cd5\u4e09\n\n```js\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let num = Math.floor(a ** (1/3));\n  return", "generation": "  let num = Math.floor(a ** (1/3));\n  return num ** 3 === a;\n};\n\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // true\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let num = Math.floor(a ** (1/3));\n  return num ** 3 === a;\n}"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey('AB'));\nconsole.log(hexKey('1077E'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n```", "generation": "  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "generation_raw": "  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a string, with each character representing a hexadecimal\n  number. Each character in the string will be '0' or '1' or '2' or '3' or '4' or '5' or '6' or '7' or '8' or '9' or 'a' or 'b' or 'c' or 'd' or 'e' or 'f'.\n\n  There will be an extra couple of characters '0x' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0xf\"\n  decimalToHex(32)   # returns \"0x20\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  while (decimal > 0) {\n    hex = (decimal % 16) + hex;\n    decimal = Math.floor(decimal / 16);\n  }\n  return '0x' + hex;\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to\n  octal format. The function should return a string, with each character representing a octal\n  number. Each character in the string will be '0' or '1' or '2' or '3' or '4' or '5' or '6' or '7'.\n\n  There will be an extra couple of characters '0o' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"0o17\"\n  decimalToOctal(32", "generation": "  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a string, with each character representing a hexadecimal\n  number. Each character in the string will be '0' or '1' or '2' or '3' or '4' or '5' or '6' or '7' or '8' or '9' or 'a' or 'b' or 'c' or 'd' or 'e' or 'f'.\n\n  There will be an extra couple of characters '0x' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0xf\"\n  decimalToHex(32)   # returns \"0x20\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  while (decimal > 0) {\n    hex = (decimal % 16) + hex;\n    decimal = Math.floor(decimal / 16);\n  }\n  return '0x' + hex;\n}"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "generation_raw": "  let set = new Set();\n  let str = s;\n  while (str.length > 2) {\n    let temp = str.split(\"\");\n    let tempStr = \"\";\n    for (let i = 0; i < temp.length; i++) {\n      if (i === temp.length - 1) {\n        tempStr += temp[i];\n      } else {\n        tempStr += temp[i] + temp[i + 1];\n      }\n    }\n    if (set.has(tempStr)) {\n      return false;\n    } else {\n      set.add(tempStr);\n    }\n    str = tempStr;\n  }\n  return true;\n};\n```", "generation": "  let set = new Set();\n  let str = s;\n  while (str.length > 2) {\n    let temp = str.split(\"\");\n    let tempStr = \"\";\n    for (let i = 0; i < temp.length; i++) {\n      if (i === temp.length - 1) {\n        tempStr += temp[i];\n      } else {\n        tempStr += temp[i] + temp[i + 1];\n      }\n    }\n    if (set.has(tempStr)) {\n      return false;\n    } else {\n      set.add(tempStr);\n    }\n    str = tempStr;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "generation_raw": "  const letterGrade = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letterGrade.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letterGrade.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letterGrade.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letterGrade.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letterGrade.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letterGrade.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letterGrade.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letterGrade.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letterGrade.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letterGrade.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letterGrade.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letterGrade.push(\"D-\");\n    } else {\n      letterGrade.push(\"E\");\n    }\n  }\n  return letterGrade;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n\n/*\n  Given an array of integers, find the first missing positive integer in linear time and constant space. In other words,\n  assume the array is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 and the first missing", "generation": "  const letterGrade = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letterGrade.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letterGrade.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letterGrade.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letterGrade.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letterGrade.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letterGrade.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letterGrade.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letterGrade.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letterGrade.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letterGrade.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letterGrade.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letterGrade.push(\"D-\");\n    } else {\n      letterGrade.push(\"E\");\n    }\n  }\n  return letterGrade;\n}"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "generation_raw": "  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only unique characters or false otherwise\n  Examples\n  uniqueCharacters('Hello') == false\n  uniqueCharacters('kittens') == true\n  uniqueCharacters('orange') == false\n  */\nconst uniqueCharacters = (string) => {\n  const isUnique = (string) => {\n    const set = new Set();\n    for (let i = 0; i < string.length; i++) {\n      if (set.has(string[i])) return false;\n      set.add(string[i]);\n    }\n    return true;\n  };\n  return isUnique(string);\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only alphabetical characters or false otherwise\n  Examples\n  onlyAlphabet('Hello') == false\n  onlyAlphabet('kittens') == true\n  onlyAlphabet('orange') == false\n  */\nconst onlyAlphabet = (string) => {\n  const isAlphabet = (string) => {\n    for (let i = 0; i < string.length; i++) {\n      if (isNaN(string[i]) && string[i] !== ' ') return false;\n    }\n    return true;\n  };\n  return isAlphabet(string);\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only alphabetical characters and space or false otherwise\n  Examples\n  onlyAlphabetAndSpace('Hello') == false\n  onlyAlphabetAndSpace('kittens') == true\n  onlyAlphabetAndSpace('orange') == false\n  onlyAlphabetAndSpace('hello world') == false\n  */\nconst onlyAlphabetAndSpace = (string) => {\n  const isAlphabetAndSpace = (", "generation": "  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only unique characters or false otherwise\n  Examples\n  uniqueCharacters('Hello') == false\n  uniqueCharacters('kittens') == true\n  uniqueCharacters('orange') == false\n  */\nconst uniqueCharacters = (string) => {\n  const isUnique = (string) => {\n    const set = new Set();\n    for (let i = 0; i < string.length; i++) {\n      if (set.has(string[i])) return false;\n      set.add(string[i]);\n    }\n    return true;\n  };\n  return isUnique(string);\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only alphabetical characters or false otherwise\n  Examples\n  onlyAlphabet('Hello') == false\n  onlyAlphabet('kittens') == true\n  onlyAlphabet('orange') == false\n  */\nconst onlyAlphabet = (string) => {\n  const isAlphabet = (string) => {\n    for (let i = 0; i < string.length; i++) {\n      if (isNaN(string[i]) && string[i] !== ' ') return false;\n    }\n    return true;\n  };\n  return isAlphabet(string);\n}"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 1; i < 10 ** n; i++) {\n    if (i.toString().startsWith('1') && i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n};\n```", "generation": "  let count = 0;\n  for (let i = 1; i < 10 ** n; i++) {\n    if (i.toString().startsWith('1') && i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "generation_raw": "  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n```", "generation": "  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = ", "generation": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. add the elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "generation_raw": "  const arr = s.split(' ');\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    let str = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      str += arr[i][arr[i].length - j - 1];\n    }\n    res.push(str);\n  }\n  return res.join(' ');\n};\n```", "generation": "  const arr = s.split(' ');\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    let str = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      str += arr[i][arr[i].length - j - 1];\n    }\n    res.push(str);\n  }\n  return res.join(' ');\n}"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "generation_raw": "  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n};\n```", "generation": "  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "generation_raw": "  const sortedArray = array.sort((a, b) => a - b);\n  const sum = sortedArray.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  if (sum % 2 === 0) {\n    return sortedArray.reverse();\n  }\n  return sortedArray;\n};\n\nconsole.log(sortArray([])); // []\nconsole.log(sortArray([5])); // [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]\n```\n\n### \ud83d\udcd1Summary\n\nThis problem is a bit tricky.\n\nThe key is to understand the problem statement.\n\nThe problem statement says:\n\n> Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\nThe key is to understand the sum of the first and last index values.\n\nIf the sum is even, then the array should be sorted in descending order.\n\nIf the sum is odd, then the array should be sorted in ascending order.\n\nThe solution is to first sort the array in ascending order.\n\nThen, if the sum of the first and last index values is even, then reverse the array.\n\nIf the sum of the first and last index values is odd, then do nothing.\n\n### \ud83d\udcf0References\n\n* [LeetCode Problem: Sort Array By Parity II](https://leetcode.com/problems/sort-array-by-parity-ii/)\n* [LeetCode Problem: Sort Array By Parity II - 2nd Solution](https://leetcode.com/problems/sort-array-by-par", "generation": "  const sortedArray = array.sort((a, b) => a - b);\n  const sum = sortedArray.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  if (sum % 2 === 0) {\n    return sortedArray.reverse();\n  }\n  return sortedArray;\n}"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "generation_raw": "  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 'a' && arr[i] <= 'z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) + 2);\n    } else if (arr[i] >= 'A' && arr[i] <= 'Z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) + 2);\n    }\n  }\n  return arr.join('');\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 'a' && arr[i] <= 'z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) - 2);\n    } else if (arr[i] >= 'A' && arr[i] <= 'Z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) - 2);\n    }\n  }\n  return arr.join('');\n};\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated 13\n  places.\n  For example:\n  rot13('hi') returns 'nf'\n  rot13('asdfghjkl') returns 'abcdefghij'\n  rot13('gf') returns 'bj'\n", "generation": "  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 'a' && arr[i] <= 'z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) + 2);\n    } else if (arr[i] >= 'A' && arr[i] <= 'Z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) + 2);\n    }\n  }\n  return arr.join('');\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 'a' && arr[i] <= 'z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) - 2);\n    } else if (arr[i] >= 'A' && arr[i] <= 'Z') {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt(0) - 2);\n    }\n  }\n  return arr.join('');\n}"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "generation_raw": "  if (lst.length < 2) return null;\n  let min = lst[0];\n  let secMin = lst[1];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      secMin = min;\n      min = lst[i];\n    } else if (lst[i] < secMin && lst[i] != min) {\n      secMin = lst[i];\n    }\n  }\n  return secMin;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n```", "generation": "  if (lst.length < 2) return null;\n  let min = lst[0];\n  let secMin = lst[1];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      secMin = min;\n      min = lst[i];\n    } else if (lst[i] < secMin && lst[i] != min) {\n      secMin = lst[i];\n    }\n  }\n  return secMin;\n}"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "generation_raw": "  let count = 0;\n  S.split(\".\").forEach((sentence) => {\n    if (sentence.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n```", "generation": "  let count = 0;\n  S.split(\".\").forEach((sentence) => {\n    if (sentence.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n}"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n", "generation_raw": "  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconst anyInt = (x, y, z) => {\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\n```\n\n### \u26a0\ufe0f Edge Cases\n\n```js\nconst anyInt = (x, y, z) => {\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\nconsole.log(anyInt(3.6, -2.2, 2.2)); // false\nconsole.log(anyInt(3.6, -2.2, 2.6)); // false\nconsole.log(anyInt(3.6, -2.2, 2.4)); // false\nconsole.log(anyInt(3.6, -2.", "generation": "  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconst anyInt = (x, y, z) => {\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\n```\n\n### \u26a0\ufe0f Edge Cases\n\n```js\nconst anyInt = (x, y, z) => {\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "generation_raw": "  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const swap = (letter) => {\n    const index = letters.indexOf(letter);\n    return letters[index + 2];\n  }\n  const swapVowel = (letter) => {\n    const index = vowels.indexOf(letter);\n    return vowels[index + 1];\n  }\n  const encodedMessage = message.toLowerCase().split('').map(letter => swapVowel(letter)).join('');\n  return encodedMessage.split('').map(letter => swap(letter)).join('');\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const swap = (letter) => {\n    const index = letters.indexOf(letter);\n    return letters[index - 2];\n  }\n  const swapVowel = (", "generation": "  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const swap = (letter) => {\n    const index = letters.indexOf(letter);\n    return letters[index + 2];\n  }\n  const swapVowel = (letter) => {\n    const index = vowels.indexOf(letter);\n    return vowels[index + 1];\n  }\n  const encodedMessage = message.toLowerCase().split('').map(letter => swapVowel(letter)).join('');\n  return encodedMessage.split('').map(letter => swap(letter)).join('');\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const swap = (letter) => {\n    const index = letters.indexOf(letter);\n    return letters[index - 2];\n  }"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 0) {\n      sum += 0;\n    } else {\n      let num = lst[i];\n      while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n      }\n    }\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])); // 10\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])); // 25\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])); // 13\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])); // 11\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21])); // 3\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7])); // 7\n```", "generation": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 0) {\n      sum += 0;\n    } else {\n      let num = lst[i];\n      while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n      }\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "generation_raw": "  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let isUpper = true;\n  let isLower = true;\n  Object.keys(dict).forEach(key => {\n    if (key.toLowerCase() !== key) {\n      isUpper = false;\n    } else if (key.toUpperCase() !== key) {\n      isLower = false;\n    }\n  });\n  return isUpper || isLower;\n};\n\n/*\n  Given a dictionary, return true if all values are strings, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictValue({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictValue({\"a\":\"apple\", \"b\":123, \"c\":\"banana\"}) should return false.\n  checkDictValue({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValue({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValue({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValue = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let isString = true;\n  Object.values(dict).forEach(value => {\n    if (typeof value !== 'string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all values are unique, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictUnique({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictUnique({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"banana\"}) should return false.\n  checkDictUnique({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false", "generation": "  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let isUpper = true;\n  let isLower = true;\n  Object.keys(dict).forEach(key => {\n    if (key.toLowerCase() !== key) {\n      isUpper = false;\n    } else if (key.toUpperCase() !== key) {\n      isLower = false;\n    }\n  });\n  return isUpper || isLower;\n};\n\n/*\n  Given a dictionary, return true if all values are strings, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictValue({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictValue({\"a\":\"apple\", \"b\":123, \"c\":\"banana\"}) should return false.\n  checkDictValue({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValue({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValue({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValue = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let isString = true;\n  Object.values(dict).forEach(value => {\n    if (typeof value !== 'string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all values are unique, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictUnique({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictUnique({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"banana\"}) should return false.\n  checkDictUnique({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "generation_raw": "  let arr = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  \u89e3\u6cd5\u4e8c\uff1a\n  1. \u904d\u5386 2 \u5230 n\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u7d20\u6570\n  2. \u5982\u679c\u662f\u7d20\u6570\uff0c\u5219\u63a8\u5165\u6570\u7ec4\n  3. \u8fd4\u56de\u6570\u7ec4\n*/\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n```\n\n### \u89e3\u6cd5\u4e09\n\n```js\n/*\n  \u89e3\u6cd5\u4e09\uff1a\n  1. \u904d\u5386 2 \u5230 n\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u7d20\u6570\n  2. \u5982\u679c\u662f\u7d20\u6570\uff0c\u5219\u63a8\u5165\u6570\u7ec4\n  3. \u8fd4\u56de\u6570\u7ec4\n*/\nconst countUpTo = (n)", "generation": "  let arr = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  \u89e3\u6cd5\u4e8c\uff1a\n  1. \u904d\u5386 2 \u5230 n\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u7d20\u6570\n  2. \u5982\u679c\u662f\u7d20\u6570\uff0c\u5219\u63a8\u5165\u6570\u7ec4\n  3. \u8fd4\u56de\u6570\u7ec4\n*/\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "generation_raw": "  let result = 0;\n  let a10 = a % 10;\n  let b10 = b % 10;\n  let a100 = Math.floor(a / 10);\n  let b100 = Math.floor(b / 10);\n  if (a10 === 0 || b10 === 0) {\n    return result;\n  }\n  if (a10 === 1 && b10 === 1) {\n    return 10;\n  }\n  if (a10 === 1) {\n    return b10 * a100 + multiply(a100, b100);\n  }\n  if (b10 === 1) {\n    return a10 * b100 + multiply(a100, b100);\n  }\n  return a10 * b100 + multiply(a100, b100);\n};\n\n/*\n  Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, \n  find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers \n  as well.\n  Examples:\n  firstMissingPositive([3, 4, -1, 1]) should return 2.\n  firstMissingPositive([1, 2, 0]) should return 3.\n  firstMissingPositive([2, 1]) should return 3.\n  firstMissingPositive([1]) should return 2.\n  firstMissingPositive([1, 2]) should return 3.\n  firstMissingPositive([1, 2, 3]) should return 4.\n  firstMissingPositive([-2, -1, 0, 1, 2]) should return 3.\n  firstMissingPositive([1, 2, 3, 4]) should return 5.\n  firstMissingPositive([1, 2, 3, 4, 5]) should return 6.\n  firstMissingPositive([1, 2, 3, ", "generation": "  let result = 0;\n  let a10 = a % 10;\n  let b10 = b % 10;\n  let a100 = Math.floor(a / 10);\n  let b100 = Math.floor(b / 10);\n  if (a10 === 0 || b10 === 0) {\n    return result;\n  }\n  if (a10 === 1 && b10 === 1) {\n    return 10;\n  }\n  if (a10 === 1) {\n    return b10 * a100 + multiply(a100, b100);\n  }\n  if (b10 === 1) {\n    return a10 * b100 + multiply(a100, b100);\n  }\n  return a10 * b100 + multiply(a100, b100);\n}"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (/[AEIOU]/.test(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n```", "generation": "  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (/[AEIOU]/.test(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "generation_raw": "  const num = parseInt(value);\n  const num1 = num + 1;\n  const num2 = num - 1;\n  if (Math.abs(num1 - value) < Math.abs(num2 - value)) {\n    return num1;\n  } else {\n    return num2;\n  }\n};\n\n/*\n  The function closestInteger(value) takes a string and returns the closest integer to it.\n  If the number is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n*/\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const num1 = num + 1;\n  const num2 = num - 1;\n  if (Math.abs(num1 - value) < Math.abs(num2 - value)) {\n    return num1;\n  } else {\n    return num2;\n  }\n};\n```", "generation": "  const num = parseInt(value);\n  const num1 = num + 1;\n  const num2 = num - 1;\n  if (Math.abs(num1 - value) < Math.abs(num2 - value)) {\n    return num1;\n  } else {\n    return num2;\n  }\n};\n\n/*\n  The function closestInteger(value) takes a string and returns the closest integer to it.\n  If the number is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n*/\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const num1 = num + 1;\n  const num2 = num - 1;\n  if (Math.abs(num1 - value) < Math.abs(num2 - value)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "generation_raw": "  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i % 2 === 0 ? i + 2 : i + 1);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i % 2 === 0 ? i + 2 : i + 1);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n```", "generation": "  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i % 2 === 0 ? i + 2 : i + 1);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i % 2 === 0 ? i + 2 : i + 1);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "generation_raw": "  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One", "generation": "  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "generation_raw": "  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      result = i;\n    }\n  }\n  return result;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n\n/*\n  Given an array of integers, find the first missing positive integer in linear time and constant space. In other words,\n  find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\n  For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\n  You can modify the input array in-place.\n*/\nconst firstMissingPositive = (arr) => {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > 0 && arr[i] <= arr.length && arr[arr[i] - 1] !== arr[i]) {\n      const temp = arr[arr[i] - 1];\n      arr[arr[i] - 1] = arr[i];\n      arr[i] = temp;\n    } else {\n      i++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== i + 1) {\n      return i + 1;\n    }\n  }\n  return arr.length + 1;\n};\n\nconsole.log(firstMissingPositive([3, 4, -1, 1]));\nconsole.log(firstMissingPositive([1, 2, 0]));\n\n/*\n  Given an array of integers, find the smallest positive integer that is not the sum of a subset of the array.\n\n  For example, given [1, 2, 3] return 4 because 4 is the smallest missing positive integer that is not a sum of a subset of the array [1, 2, 3].\n\n  You", "generation": "  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      result = i;\n    }\n  }\n  return result;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n\n/*\n  Given an array of integers, find the first missing positive integer in linear time and constant space. In other words,\n  find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\n  For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\n  You can modify the input array in-place.\n*/\nconst firstMissingPositive = (arr) => {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > 0 && arr[i] <= arr.length && arr[arr[i] - 1] !== arr[i]) {\n      const temp = arr[arr[i] - 1];\n      arr[arr[i] - 1] = arr[i];\n      arr[i] = temp;\n    } else {\n      i++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== i + 1) {\n      return i + 1;\n    }\n  }\n  return arr.length + 1;\n}"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "generation_raw": "  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1) | 0;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n * @lc app=leetcode.cn id=160 lang=javascript\n *\n * [160] \u76f8\u4ea4\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  let pA = headA,\n    pB = headB;\n  while (pA !== pB) {\n    pA = pA === null ? headB : pA.next;\n    pB = pB === null ? headA : pB.next;\n  }\n  return pA;\n};\n// @lc code=end\n```\n\n### \u89e3\u6cd5\u4e09\n\n```js\n/*\n * @lc app=leetcode.cn id=160 lang=javascript\n *\n * [160] \u76f8\u4ea4\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersection", "generation": "  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1) | 0;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*\n * @lc app=leetcode.cn id=160 lang=javascript\n *\n * [160] \u76f8\u4ea4\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  let pA = headA,\n    pB = headB;\n  while (pA !== pB) {\n    pA = pA === null ? headB : pA.next;\n    pB = pB === null ? headA : pB.next;\n  }\n  return pA;\n};\n// @lc code=end\n```\n\n### \u89e3\u6cd5\u4e09\n\n```js\n/*\n * @lc app=leetcode.cn id=160 lang=javascript\n *\n * [160] \u76f8\u4ea4\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "generation_raw": "  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let str = x[i].toString();\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    if (count === 0) {\n      arr.push(x[i]);\n    }\n  }\n  return arr;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\nconsole.log(uniqueDigits([152, 32", "generation": "  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let str = x[i].toString();\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    if (count === 0) {\n      arr.push(x[i]);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "generation_raw": "  return arr.sort((a, b) => b.length - a.length)\n}\n\nconst reverse = (arr) => {\n  return arr.reverse()\n}\n\nconst replace = (arr) => {\n  return arr.map(item => {\n    switch(item) {\n      case 1:\n        return 'One'\n      case 2:\n        return 'Two'\n      case 3:\n        return 'Three'\n      case 4:\n        return 'Four'\n      case 5:\n        return 'Five'\n      case 6:\n        return 'Six'\n      case 7:\n        return 'Seven'\n      case 8:\n        return 'Eight'\n      case 9:\n        return 'Nine'\n      default:\n        return item\n    }\n  })\n}\n\nconst sortTheArray = (arr) => {\n  return replace(reverse(byLength(arr)))\n}\n```", "generation": "  return arr.sort((a, b) => b.length - a.length)\n}\n\nconst reverse = (arr) => {\n  return arr.reverse()\n}\n\nconst replace = (arr) => {\n  return arr.map(item => {\n    switch(item) {\n      case 1:\n        return 'One'\n      case 2:\n        return 'Two'\n      case 3:\n        return 'Three'\n      case 4:\n        return 'Four'\n      case 5:\n        return 'Five'\n      case 6:\n        return 'Six'\n      case 7:\n        return 'Seven'\n      case 8:\n        return 'Eight'\n      case 9:\n        return 'Nine'\n      default:\n        return item\n    }\n  })\n}\n\nconst sortTheArray = (arr) => {\n  return replace(reverse(byLength(arr)))\n}"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "generation_raw": "  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\n/*\n  sum(i) is the sum of numbers from 1 to i.\n  Example:\n  sum(5) == 1 + 2 + 3 + 4 + 5 == 15\n*/\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  factorial(i) is the multiplication of the numbers from 1 to i.\n  Example:\n  factorial(5) == 1 * 2 * 3 * 4 * 5 == 120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconsole.log(f(5));\n```", "generation": "  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\n/*\n  sum(i) is the sum of numbers from 1 to i.\n  Example:\n  sum(5) == 1 + 2 + 3 + 4 + 5 == 15\n*/\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  factorial(i) is the multiplication of the numbers from 1 to i.\n  Example:\n  factorial(5) == 1 * 2 * 3 * 4 * 5 == 120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n}"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "generation_raw": "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (isPalindrome(str)) {\n      if (isEven(i)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (str) => {\n  let left = 0, right = str.length - 1;\n  while (left < right) {\n    if (str[left] !== str[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}\n\nconst isEven = (num) => {\n  return num % 2 === 0;\n}\n\nconsole.log(evenOddPalindrome(12));\n```", "generation": "  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (isPalindrome(str)) {\n      if (isEven(i)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (str) => {\n  let left = 0, right = str.length - 1;\n  while (left < right) {\n    if (str[left] !== str[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}\n\nconst isEven = (num) => {\n  return num % 2 === 0;\n}"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n};\n```", "generation": "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  return count <= 1;\n};\n\n/*\n  /*\n  Given an array of integers arr.\n  \n  A pair (i,j) is called a good pair if the following conditions are met:\n  \n  i < j\n  arr[i] - arr[j] is divisible by 2\n  \n  Return the number of good pairs.\n  \n  For example, given the array arr = [1, 3, 2, 6, 10, 20], the following good\n  pairs are present in the array:\n  \n  (0, 3) : arr[0] - arr[3] = 10\n  (0, 4) : arr[0] - arr[4] = 10\n  (1, 4) : arr[1] - arr[4] = 1\n  (2, 4) : arr[2] - arr[4] = 4\n  (3, 4) : arr[3] - arr[4] = 1\n  \n  So the answer is 5.\n  */\nconst countGoodPairs = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] - arr[j] % 2 === 0 && i < j) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  /*\n  Given an array of integers arr.\n  \n  A pair (i,j) is called a good pair if the following conditions are met:\n  \n  i < j\n  arr[i] - arr[j] is divisible by 2\n  \n  Return the number of good pairs.\n  \n  For example, given the array arr = [1, 3, 2", "generation": "  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  return count <= 1;\n};\n\n/*\n  /*\n  Given an array of integers arr.\n  \n  A pair (i,j) is called a good pair if the following conditions are met:\n  \n  i < j\n  arr[i] - arr[j] is divisible by 2\n  \n  Return the number of good pairs.\n  \n  For example, given the array arr = [1, 3, 2, 6, 10, 20], the following good\n  pairs are present in the array:\n  \n  (0, 3) : arr[0] - arr[3] = 10\n  (0, 4) : arr[0] - arr[4] = 10\n  (1, 4) : arr[1] - arr[4] = 1\n  (2, 4) : arr[2] - arr[4] = 4\n  (3, 4) : arr[3] - arr[4] = 1\n  \n  So the answer is 5.\n  */\nconst countGoodPairs = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] - arr[j] % 2 === 0 && i < j) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return \"YES\";\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n      count--;\n    }\n  }\n  if (count === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*\n  Example:\n  Input: [1, 2, 3, 4]\n  Output: [1, 2, 3, 4]\n  Explanation:\n  The list is already an even list, no need to change it.\n*/\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return lst1;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n      count--;\n    }\n  }\n  if (count === 0) {\n    return lst2;\n  }\n  return \"NO\";\n};\n\n/*\n  Example:\n  Input: [1, 2, 3, 4]\n  Output: [1, 2, 3, 4]\n  Explanation:\n  The list is already an even list, no need to change it.\n*/\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0", "generation": "  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return \"YES\";\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n      count--;\n    }\n  }\n  if (count === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*\n  Example:\n  Input: [1, 2, 3, 4]\n  Output: [1, 2, 3, 4]\n  Explanation:\n  The list is already an even list, no need to change it.\n*/\nconst exchange = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return lst1;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n      count--;\n    }\n  }\n  if (count === 0) {\n    return lst2;\n  }\n  return \"NO\";\n}"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "generation_raw": "  let arr = test.split(' ');\n  let obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]]) {\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n};\n\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\nconsole.log(histogram('a b c a b'));\nconsole.log(histogram('b b b b a'));\nconsole.log(histogram(''));\n\n/*\n  Given a string, return the number of times that a substring length 2 appears in the string and also as the first and last characters of the string.\n  \n  Example:\n  count_substring('abcabc') == 3\n  count_substring('aba') == 2\n  count_substring('abc') == 0\n  count_substring('abcabcabc') == 6\n  count_substring('') == 0\n\n  */\nconst count_substring = (test) => {\n  let count = 0;\n  for (let i = 0; i < test.length - 1; i++) {\n    if (test[i] === test[i + 1]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(count_substring('abcabc'));\nconsole.log(count_substring('aba'));\nconsole.log(count_substring('abc'));\nconsole.log(count_substring('abcabcabc'));\nconsole.log(count_substring(''));\n\n/*\n  Given a string, return the number of times that a substring length 2 appears in the string and also as the first and last characters of the string.\n  \n  Example:\n  count_substring('abcabc') == 3\n  count_substring('aba') == 2\n  count_substring('abc') == 0\n  count_substring('abcab", "generation": "  let arr = test.split(' ');\n  let obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]]) {\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n};\n\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\nconsole.log(histogram('a b c a b'));\nconsole.log(histogram('b b b b a'));\nconsole.log(histogram(''));\n\n/*\n  Given a string, return the number of times that a substring length 2 appears in the string and also as the first and last characters of the string.\n  \n  Example:\n  count_substring('abcabc') == 3\n  count_substring('aba') == 2\n  count_substring('abc') == 0\n  count_substring('abcabcabc') == 6\n  count_substring('') == 0\n\n  */\nconst count_substring = (test) => {\n  let count = 0;\n  for (let i = 0; i < test.length - 1; i++) {\n    if (test[i] === test[i + 1]) {\n      count += 1;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "generation_raw": "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n};\n\nconst isPalindrome = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  while (left < right) {\n    if (s[left] !== s[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n};\n\nconsole.log(reverseDelete('abcde', 'ae'));\nconsole.log(reverseDelete('abcdef', 'b'));\nconsole.log(reverseDelete('abcdedcba', 'ab'));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n};\n\nconst isPalindrome = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  ", "generation": "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n};\n\nconst isPalindrome = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  while (left < right) {\n    if (s[left] !== s[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n};\n\nconsole.log(reverseDelete('abcde', 'ae'));\nconsole.log(reverseDelete('abcdef', 'b'));\nconsole.log(reverseDelete('abcdedcba', 'ab'));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n}"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "generation_raw": "  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    res.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n  }\n  return res;\n};\n```", "generation": "  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    res.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n  }\n  return res;\n}"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "generation_raw": "  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while (sum >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 11\n  maxSubArraySum([-1, -2, -3]) == -1\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = -Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    maxSum = Math.max(maxSum, sum);\n    sum = sum < 0 ? 0 : sum;\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of the elements between indices\n  left and right inclusive.\n  Example\n  sumRange([2, 3, 4], 1, 2) == 7\n  sumRange([2, 3, 4], 2, 3) == 8\n  sumRange([2, 3, 4], 2, 4) == 9\n  sumRange([2, 3, 4], 0, 4) == 10\n  */\nconst sumRange = (nums, left, right) => {\n  let sum = 0;\n  for (let i = left; i <= right; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of the elements between indices\n  left and right exclusive.\n  Example\n  sumRangeExclusive([2, 3, 4],", "generation": "  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while (sum >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 11\n  maxSubArraySum([-1, -2, -3]) == -1\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = -Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    maxSum = Math.max(maxSum, sum);\n    sum = sum < 0 ? 0 : sum;\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of the elements between indices\n  left and right inclusive.\n  Example\n  sumRange([2, 3, 4], 1, 2) == 7\n  sumRange([2, 3, 4], 2, 3) == 8\n  sumRange([2, 3, 4], 2, 4) == 9\n  sumRange([2, 3, 4], 0, 4) == 10\n  */\nconst sumRange = (nums, left, right) => {\n  let sum = 0;\n  for (let i = left; i <= right; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "generation_raw": "  let count = 0;\n  let bucket = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === 1) {\n        bucket += 1;\n      } else {\n        if (bucket > 0) {\n          bucket = bucket - 1;\n        } else {\n          count += 1;\n        }\n      }\n    }\n    bucket = 0;\n  }\n  return count;\n};\n\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2));\n```", "generation": "  let count = 0;\n  let bucket = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === 1) {\n        bucket += 1;\n      } else {\n        if (bucket > 0) {\n          bucket = bucket - 1;\n        } else {\n          count += 1;\n        }\n      }\n    }\n    bucket = 0;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "generation_raw": "  return arr.sort((a, b) => {\n    return a - b\n  })\n}\n```", "generation": "  return arr.sort((a, b) => {\n    return a - b\n  })\n}"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "generation_raw": "  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.split('a').length - 1 === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels and exactly n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"M", "generation": "  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.split('a').length - 1 === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "generation_raw": "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '';\n  let index = 0;\n  let result = '';\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      if (vowel === '') {\n        vowel = word[i];\n        index = i;\n      } else {\n        if (vowel !== word[i]) {\n          if (word[i] < vowel) {\n            vowel = word[i];\n            index = i;\n          }\n        }\n      }\n    }\n  }\n  if (vowel !== '') {\n    result = vowel;\n  }\n  return result;\n};\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\n```", "generation": "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '';\n  let index = 0;\n  let result = '';\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      if (vowel === '') {\n        vowel = word[i];\n        index = i;\n      } else {\n        if (vowel !== word[i]) {\n          if (word[i] < vowel) {\n            vowel = word[i];\n            index = i;\n          }\n        }\n      }\n    }\n  }\n  if (vowel !== '') {\n    result = vowel;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "generation_raw": "  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Given a string, find the length of the longest substring without repeating characters.\n  Example 1:\n  Input: \"abcabcbb\"\n  Output: 3\n  Explanation: The answer is \"abc\", with the length of 3.\n  Example 2:\n  Input: \"bbbbb\"\n  Output: 1\n  Explanation: The answer is \"b\", with the length of 1.\n  Example 3:\n  Input: \"pwwkew\"\n  Output: 3\n  Explanation: The answer is \"wke\", with the length of 3.\n  Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n*/\nconst lengthOfLongestSubstring = (str) => {\n  let max = 0;\n  let start = 0;\n  let map = {};\n  for (let i = 0; i < str.length; i++) {\n    if (map[str[i]] !== undefined && map[str[i]] >= start) {\n      start = map[str[i]] + 1;\n    }\n    map[str[i]] = i;\n    max = Math.max(max, i - start + 1);\n  }\n  return max;\n};\n\n/*\n  Given a string, find the length of the longest substring with no repeated characters.\n  Example 1:\n  Input: \"abcabcbb\"\n  Output: 3\n  Explanation: The answer is \"abc\", with the length of 3.\n  Example ", "generation": "  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Given a string, find the length of the longest substring without repeating characters.\n  Example 1:\n  Input: \"abcabcbb\"\n  Output: 3\n  Explanation: The answer is \"abc\", with the length of 3.\n  Example 2:\n  Input: \"bbbbb\"\n  Output: 1\n  Explanation: The answer is \"b\", with the length of 1.\n  Example 3:\n  Input: \"pwwkew\"\n  Output: 3\n  Explanation: The answer is \"wke\", with the length of 3.\n  Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n*/\nconst lengthOfLongestSubstring = (str) => {\n  let max = 0;\n  let start = 0;\n  let map = {};\n  for (let i = 0; i < str.length; i++) {\n    if (map[str[i]] !== undefined && map[str[i]] >= start) {\n      start = map[str[i]] + 1;\n    }\n    map[str[i]] = i;\n    max = Math.max(max, i - start + 1);\n  }\n  return max;\n}"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "generation_raw": "  const max = arr.sort((a, b) => b - a)[k - 1];\n  return arr.filter(num => num === max);\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n```", "generation": "  const max = arr.sort((a, b) => b - a)[k - 1];\n  return arr.filter(num => num === max);\n}"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n\n/*\n  Given a non-empty list of integers, return the sum of all of the odd elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0", "generation": "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\n\n```js\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (arr[i] >= 10) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n};\n\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n```\n\n### \u89e3\u6cd5\u4e09\uff1a\n\n```js\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2", "generation": "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n```\n\n### \u89e3\u6cd5\u4e8c\uff1a\n\n```js\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (arr[i] >= 10) {\n      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "generation_raw": "  let arr = []\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2\n    } else {\n      n = 3 * n + 1\n    }\n    arr.push(n)\n  }\n  return [1, ...arr]\n}\n```", "generation": "  let arr = []\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2\n    } else {\n      n = 3 * n + 1\n    }\n    arr.push(n)\n  }\n  return [1, ...arr]\n}"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "generation_raw": "  if (date.length === 0) return false;\n  const [month, day, year] = date.split('-');\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const days = [31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (year.length !== 4) return false;\n  if (months.includes(month) && day === 31) return false;\n  if (months.includes(month) && day === 30) return false;\n  if (months.includes(month) && day === 29) return false;\n  if (months.includes(month) && day === 28) return false;\n  if (month === 2 && day === 29) return false;\n  if (month === 2 && day === 28) return false;\n  return true;\n};\n\nconsole.log(validDate('03-11-2000')); // true\nconsole.log(validDate('15-01-2012')); // false\nconsole.log(validDate('04-0-2040')); // false\nconsole.log(validDate('06-04-2020')); // true\nconsole.log(validDate('06/04/2020')); // false\nconsole.log(validDate('06/04/2020')); // false\nconsole.log(validDate('06/04/2020')); // false\nconsole.", "generation": "  if (date.length === 0) return false;\n  const [month, day, year] = date.split('-');\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const days = [31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (year.length !== 4) return false;\n  if (months.includes(month) && day === 31) return false;\n  if (months.includes(month) && day === 30) return false;\n  if (months.includes(month) && day === 29) return false;\n  if (months.includes(month) && day === 28) return false;\n  if (month === 2 && day === 29) return false;\n  if (month === 2 && day === 28) return false;\n  return true;\n}"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "generation_raw": "  const arr = txt.split(/\\s+|,+/g)\n  const res = arr.filter(item => item.length > 0)\n  const res2 = res.map(item => item.toLowerCase())\n  const res3 = res2.map((item, index) => {\n    const ord = item.charCodeAt() - 97\n    return ord % 2 === 1 ? ord : 0\n  })\n  return res3.reduce((acc, cur) => acc + cur, 0)\n}\n```", "generation": "  const arr = txt.split(/\\s+|,+/g)\n  const res = arr.filter(item => item.length > 0)\n  const res2 = res.map(item => item.toLowerCase())\n  const res3 = res2.map((item, index) => {\n    const ord = item.charCodeAt() - 97\n    return ord % 2 === 1 ? ord : 0\n  })\n  return res3.reduce((acc, cur) => acc + cur, 0)\n}"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n", "generation_raw": "  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\nconsole.log(isSorted([5])); // expected: true\nconsole.log(isSorted([1, 2, 3, 4, 5])); // expected: true\nconsole.log(isSorted([1, 3, 2, 4, 5])); // expected: false\nconsole.log(isSorted([1, 2, 3, 4, 5, 6])); // expected: true\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7])); // expected: true\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7])); // expected: false\nconsole.log(isSorted([1, 2, 2, 3, 3, 4])); // expected: true\nconsole.log(isSorted([1, 2, 2, 2, 3, 4])); // expected: false\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconsole.log(isSorted([5])); // expected: true\nconsole.log(isSorted([1, 2, 3, 4, 5])); // expected: true\nconsole.log(isSorted([1, 3, 2, 4, 5])); // expected: false\nconsole.log(isSorted([1, 2, 3, 4, 5, 6])); // expected: true\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7])); // expected: true\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7])); // expected: false\nconsole.log(isSorted([1, 2, 2", "generation": "  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "generation_raw": "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if (start > end) return 'NO';\n  return start === end ? 'NO' : 'YES';\n};\n\n/*\n  [input/output] samples:\n  isSorted([1, 2, 3, 4, 5]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ==> true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 1", "generation": "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if (start > end) return 'NO';\n  return start === end ? 'NO' : 'YES';\n}"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "generation_raw": "  if (arr.length === 0) {\n    return null;\n  }\n\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sum += 0;\n      product *= 1;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n      product *= 1;\n    } else {\n      sum += -arr[i];\n      product *= -1;\n    }\n  }\n\n  return sum * product;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n```\n\n### \ud83d\udcf1 Device and OS\n\n- Mobile and Desktop\n- Windows, Linux, MacOS, Android and iOS\n\n### \ud83d\udcbb Code Demo\n\n- [Code Demo on Code Sandbox](https://codesandbox.io/s/prod-signs-forked-0311p?file=/src/index.js)\n\n### \ud83d\udc0d Python Solution\n\n```python\nclass Solution:\n    def prodSigns(self, arr: List[int]) -> int:\n        if not arr:\n            return None\n\n        sum = 0\n        product = 1\n\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                sum += 0\n                product *= 1\n            elif arr[i] > 0:\n                sum += arr[i]\n                product *= 1\n            else:\n                sum += -arr[i]", "generation": "  if (arr.length === 0) {\n    return null;\n  }\n\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sum += 0;\n      product *= 1;\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n      product *= 1;\n    } else {\n      sum += -arr[i];\n      product *= -1;\n    }\n  }\n\n  return sum * product;\n}"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "generation_raw": "  const n = grid.length;\n  const dp = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n  const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n  const get = (i, j) => {\n    if (i < 0 || j < 0 || i >= n || j >= n) return Infinity;\n    return grid[i][j];\n  };\n  const getMin = (i, j) => {\n    let min = Infinity;\n    for (const [dx, dy] of directions) {\n      const x = i + dx;\n      const y = j + dy;\n      min = Math.min(min, get(x, y));\n    }\n    return min;\n  };\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = getMin(i, j);\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let [dx, dy] of directions) {\n        const x = i + dx;\n        const y = j + dy;\n        const next = getMin(x, y);\n        if (next < dp[i][j]) {\n          dp[i][j] = next;\n        }\n      }\n    }\n  }\n  const ans = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[i][j] === k) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n```", "generation": "  const n = grid.length;\n  const dp = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n  const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n  const get = (i, j) => {\n    if (i < 0 || j < 0 || i >= n || j >= n) return Infinity;\n    return grid[i][j];\n  };\n  const getMin = (i, j) => {\n    let min = Infinity;\n    for (const [dx, dy] of directions) {\n      const x = i + dx;\n      const y = j + dy;\n      min = Math.min(min, get(x, y));\n    }\n    return min;\n  };\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = getMin(i, j);\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let [dx, dy] of directions) {\n        const x = i + dx;\n        const y = j + dy;\n        const next = getMin(x, y);\n        if (next < dp[i][j]) {\n          dp[i][j] = next;\n        }\n      }\n    }\n  }\n  const ans = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[i][j] === k) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n}"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "generation_raw": "  let arr = [1, 3];\n  for (let i = 2; i < n + 1; i++) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 1] + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + (i + 1) / 2);\n    }\n  }\n  return arr;\n};\n```", "generation": "  let arr = [1, 3];\n  for (let i = 2; i < n + 1; i++) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 1] + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + (i + 1) / 2);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "generation_raw": "  let res = 1;\n  while (n) {\n    if (n % 2) res *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return res;\n};\n```", "generation": "  let res = 1;\n  while (n) {\n    if (n % 2) res *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return res;\n}"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n", "generation_raw": "  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]')); // true\nconsole.log(isNested('[]]]]]]][[[[[]')); // false\nconsole.log(isNested('[][]')); // false\nconsole.log(isNested('[]')); // false\nconsole.log(isNested('[[][]]')); // true\nconsole.log(isNested('[[]][[')); // true\n```", "generation": "  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "generation_raw": "  return lst.map(num => Math.pow(num, 2)).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubes = (lst) => {\n  return lst.map(num => Math.pow(num, 3)).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesFloor = (lst) => {\n  return lst.map(num => Math.pow(num, 3)).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor)", "generation": "  return lst.map(num => Math.pow(num, 2)).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubes = (lst) => {\n  return lst.map(num => Math.pow(num, 3)).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesFloor = (lst) => {\n  return lst.map(num => Math.pow(num, 3)).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "generation_raw": "  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/;\n  const isWord = /\\w/;\n  return isLetter.test(lastChar) && !isWord.test(lastChar);\n};\n\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // false\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // true\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // false\nconsole.log(checkIfLastCharIsALetter(\"\")); // false\n```", "generation": "  const lastChar = txt.slice(-1);\n  const isLetter = /[a-zA-Z]/;\n  const isWord = /\\w/;\n  return isLetter.test(lastChar) && !isWord.test(lastChar);\n}"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "generation_raw": "  const sum = arr.reduce((a, b) => a + b, 0);\n  if (sum % 2 !== 0) return -1;\n  const target = sum / 2;\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map.has(diff)) {\n      return i;\n    }\n    map.set(arr[i], i);\n  }\n  return -1;\n};\n\nconsole.log(canArrange([1, 2, 4, 3, 5]));\nconsole.log(canArrange([1, 2, 3]));\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16", "generation": "  const sum = arr.reduce((a, b) => a + b, 0);\n  if (sum % 2 !== 0) return -1;\n  const target = sum / 2;\n  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const diff = target - arr[i];\n    if (map.has(diff)) {\n      return i;\n    }\n    map.set(arr[i], i);\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "generation_raw": "  let neg = null;\n  let pos = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (neg === null || neg < lst[i]) {\n        neg = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (pos === null || pos > lst[i]) {\n        pos = lst[i];\n      }\n    }\n  }\n  return [neg, pos];\n};\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -7", "generation": "  let neg = null;\n  let pos = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (neg === null || neg < lst[i]) {\n        neg = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (pos === null || pos > lst[i]) {\n        pos = lst[i];\n      }\n    }\n  }\n  return [neg, pos];\n}"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n", "generation_raw": "  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 2.5)); // 2.5\nconsole.log(compareOne(1, \"2,3\")); // \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(compareOne(\"1\", 1)); // null\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 2.5)); // 2.5\nconsole.log(compareOne(1, \"2,3\")); // \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(compareOne(\"1\", 1)); // null\n```\n\n### \u26a0\ufe0f Edge Cases\n\n```js\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 1)); // null\nconsole.log(compareOne(1, 0)); // 1\nconsole.log(compareOne(0, 1)); // 1\nconsole.log(compareOne(0, 0)); // null\nconsole.log(compareOne(\"0\", 0)); // null\nconsole.log(compareOne(\"0\", \"0\")); // null\nconsole.log(compareOne(\"0\", \"1\")); // \"1\"\nconsole.log(compareOne(\"1\", \"0\")); // \"1\"\nconsole.log(compareOne(\"1\", 0)); // \"1\"\nconsole.", "generation": "  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 2.5)); // 2.5\nconsole.log(compareOne(1, \"2,3\")); // \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(compareOne(\"1\", 1)); // null\n```\n\n### \ud83d\udcdd Test Cases\n\n```js\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 2.5)); // 2.5\nconsole.log(compareOne(1, \"2,3\")); // \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(compareOne(\"1\", 1)); // null\n```\n\n### \u26a0\ufe0f Edge Cases\n\n```js\nconst compareOne = (a, b) => {\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return null;\n  }\n}"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSum(4) == false\n  isEqualToSum(6) == false\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSum(4) == false\n  isEqualToSum(6) == false\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSum(4) == false\n  isEqualToSum(6) == false\n  isEqualToSum(8) == true", "generation": "  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSum(4) == false\n  isEqualToSum(6) == false\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isEqualToSum(4) == false\n  isEqualToSum(6) == false\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n}"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "generation_raw": "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n```", "generation": "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "generation_raw": "  return text.replace(/\\s{2,}/g, '-')\n}\n```", "generation": "  return text.replace(/\\s{2,}/g, '-')\n}"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "generation_raw": "  const file_name_arr = file_name.split(\".\");\n  if (file_name_arr.length !== 2) {\n    return \"No\";\n  }\n  if (file_name_arr[0] === \"\") {\n    return \"No\";\n  }\n  if (file_name_arr[1] !== \"txt\" && file_name_arr[1] !== \"exe\" && file_name_arr[1] !== \"dll\") {\n    return \"No\";\n  }\n  if (file_name_arr[0].length > 3) {\n    return \"No\";\n  }\n  if (file_name_arr[0].length === 0) {\n    return \"No\";\n  }\n  if (file_name_arr[0][0] < \"a\" || file_name_arr[0][0] > \"z\") {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_arr = file_name.split(\".\");\n  if (file_name_arr.length !== 2) {\n    return \"No\";\n  }", "generation": "  const file_name_arr = file_name.split(\".\");\n  if (file_name_arr.length !== 2) {\n    return \"No\";\n  }\n  if (file_name_arr[0] === \"\") {\n    return \"No\";\n  }\n  if (file_name_arr[1] !== \"txt\" && file_name_arr[1] !== \"exe\" && file_name_arr[1] !== \"dll\") {\n    return \"No\";\n  }\n  if (file_name_arr[0].length > 3) {\n    return \"No\";\n  }\n  if (file_name_arr[0].length === 0) {\n    return \"No\";\n  }\n  if (file_name_arr[0][0] < \"a\" || file_name_arr[0][0] > \"z\") {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_arr = file_name.split(\".\");\n  if (file_name_arr.length !== 2) {\n    return \"No\";\n  }"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3])); // expected output: 6\nconsole.log(sumSquares([])); // expected output: 0\nconsole.log(sumSquares([-1, -5, 2, -1, -5])); // expected output: -126\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // expected output: 385\nconsole.log(sumSquares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])); // expected output: -385\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // expected output: 1716\nconsole.log(sumSquares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20])); // expected output: -1716\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 1", "generation": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "generation_raw": "  const words = sentence.split(' ');\n  const result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n\n  return result.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n\n  return true;\n};\n```", "generation": "  const words = sentence.split(' ');\n  const result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n\n  return result.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n\n  return true;\n}"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "generation_raw": "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator * nNumerator / nDenominator / xDenominator;\n  return result % 1 === 0;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator * nNumerator / nDenominator / xDenominator;\n  return result % 1 === 0;\n};\n```", "generation": "  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator * nNumerator / nDenominator / xDenominator;\n  return result % 1 === 0;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [xNumerator, xDenominator] = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n  const result = xNumerator * nNumerator / nDenominator / xDenominator;\n  return result % 1 === 0;\n}"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "generation_raw": "  const sum = (num) => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n  const sorted = nums.sort((a, b) => sum(a) - sum(b));\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointsDesc([1, 11, -1, -11, -12]) == [11, -11, -12, 1, -1]\n  >>> orderByPointsDesc([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sum = (num) => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n  const sorted = nums.sort((a, b) => sum(b) - sum(a));\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByDigits([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByDigits([]) == []\n  */\nconst orderByDigits = (nums) => {\n  const sum = (num) => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    ", "generation": "  const sum = (num) => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n  const sorted = nums.sort((a, b) => sum(a) - sum(b));\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointsDesc([1, 11, -1, -11, -12]) == [11, -11, -12, 1, -1]\n  >>> orderByPointsDesc([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sum = (num) => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n  const sorted = nums.sort((a, b) => sum(b) - sum(a));\n  return sorted;\n}"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "generation_raw": "  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 !== 0) {\n      count++;\n", "generation": "  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 !== 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "generation_raw": "  const arr = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));\n```", "generation": "  const arr = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "generation_raw": "  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planetsMap = planets.reduce((acc, curr) => {\n    if (curr === planet1 || curr === planet2) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  const planetsMapSorted = planetsMap.sort((a, b) => {\n    if (planets.indexOf(a) < planets.indexOf(b)) {\n      return -1;\n    } else if (planets.indexOf(a) > planets.indexOf(b)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const planetsMapSortedFiltered = planetsMapSorted.filter(planet => {\n    return planet !== planet1 && planet !== planet2;\n  });\n  return planetsMapSortedFiltered;\n};\n\n/*\n  /*\n  Write a function that takes a string and returns a new string where the first and last\n  characters have been removed.\n  Examples\n  rot13(\"abc\") ==> \"bcd\"\n  rot13(\"hello\") ==> \"jgnnq\"\n  rot13(\"xyz\") ==> \"zabc\"\n  */\nconst rot13 = str => {\n  const rot13Map = str.split(\"\").reduce((acc, curr) => {\n    if (curr.charCodeAt(0) >= 65 && curr.charCodeAt(0) <= 90) {\n      const rot13 = curr.charCodeAt(0) + 13;\n      if (rot13 > 90) {\n        rot13 -= 26;\n      }\n      acc.push(String.fromCharCode(rot13));\n    } else if (curr.charCodeAt(0) >= 97 && curr.charCodeAt(0) <= 122) {\n      const rot13 = curr.charCodeAt(0) + 13", "generation": "  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planetsMap = planets.reduce((acc, curr) => {\n    if (curr === planet1 || curr === planet2) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  const planetsMapSorted = planetsMap.sort((a, b) => {\n    if (planets.indexOf(a) < planets.indexOf(b)) {\n      return -1;\n    } else if (planets.indexOf(a) > planets.indexOf(b)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  const planetsMapSortedFiltered = planetsMapSorted.filter(planet => {\n    return planet !== planet1 && planet !== planet2;\n  });\n  return planetsMapSortedFiltered;\n};\n\n/*\n  /*\n  Write a function that takes a string and returns a new string where the first and last\n  characters have been removed.\n  Examples\n  rot13(\"abc\") ==> \"bcd\"\n  rot13(\"hello\") ==> \"jgnnq\"\n  rot13(\"xyz\") ==> \"zabc\"\n  */\nconst rot13 = str => {\n  const rot13Map = str.split(\"\").reduce((acc, curr) => {\n    if (curr.charCodeAt(0) >= 65 && curr.charCodeAt(0) <= 90) {\n      const rot13 = curr.charCodeAt(0) + 13;\n      if (rot13 > 90) {\n        rot13 -= 26;\n      }\n      acc.push(String.fromCharCode(rot13));\n    }"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "generation_raw": "  let newList = lst.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return newList;\n};\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",", "generation": "  let newList = lst.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  newList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return newList;\n}"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "generation_raw": "  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }\n  if (n === 2)", "generation": "  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }\n  if (n === 2) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return y;\n  }"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "generation_raw": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the numbers in the list that\n  are less than the given number. Ignore numbers that are negative or not\n  integers.\n  sumLessThanFour([1, 2, 3, 4, 5]) == 6\n  sumLessThanFour([1, 2, 3, 4, 5, 6]) == 15\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7]) == 28\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8]) == 42\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 57\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 72\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 87\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 102\n  sumLessThanFour([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 117\n  sumLessThanFour([1, 2, 3, ", "generation": "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "generation_raw": "  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])); // [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])); // [4, 4, 1, 0, 0, 6]\n```", "generation": "  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "generation_raw": "  let max = 0;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let strength = 0;\n    for (let j = 0; j < extension.length; j++) {\n      if (extension[j] >= \"A\" && extension[j] <= \"Z\") {\n        strength += 1;\n      } else {\n        strength -= 1;\n      }\n    }\n    if (strength > max) {\n      max = strength;\n      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n};\n\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]));\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]));\nconsole.log(strongestExtension(\"my_", "generation": "  let max = 0;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let strength = 0;\n    for (let j = 0; j < extension.length; j++) {\n      if (extension[j] >= \"A\" && extension[j] <= \"Z\") {\n        strength += 1;\n      } else {\n        strength -= 1;\n      }\n    }\n    if (strength > max) {\n      max = strength;\n      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "generation_raw": "  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.join('');\n  let b2 = b1.join('');\n  let b3 = b2.split('');\n  let b4 = b3.reverse();\n  let b5 = b4.join('');\n  let b6 = b5.split('');\n  let b7 = b6.reverse();\n  let b8 = b7.join('');\n  let b9 = b8.split('');\n  let b10 = b9.reverse();\n  let b11 = b10.join('');\n  let b12 = b11.split('');\n  let b13 = b12.reverse();\n  let b14 = b13.join('');\n  let b15 = b14.split('');\n  let b16 = b15.reverse();\n  let b17 = b16.join('');\n  let b18 = b17.split('');\n  let b19 = b18.reverse();\n  let b20 = b19.join('');\n  let b21 = b20.split('');\n  let b22 = b21.reverse();\n  let b23 = b22.join('');\n  let b24 = b23.split('');\n  let b25 = b24.reverse();\n  let b26 = b25.join('');\n  let b27 = b26.split('');\n  let b28 = b27.reverse();\n  let b29 = b28.join('');\n  let b30 = b29.split('');\n  let b31 = b30.reverse();\n  let b32 = b31.join('');\n  let b33 = b32.split('');\n  let b34 = b33.reverse();\n  let b35 = b34.join('');\n  let b36 = b35.split('');\n  let b37", "generation": "  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.join('');\n  let b2 = b1.join('');\n  let b3 = b2.split('');\n  let b4 = b3.reverse();\n  let b5 = b4.join('');\n  let b6 = b5.split('');\n  let b7 = b6.reverse();\n  let b8 = b7.join('');\n  let b9 = b8.split('');\n  let b10 = b9.reverse();\n  let b11 = b10.join('');\n  let b12 = b11.split('');\n  let b13 = b12.reverse();\n  let b14 = b13.join('');\n  let b15 = b14.split('');\n  let b16 = b15.reverse();\n  let b17 = b16.join('');\n  let b18 = b17.split('');\n  let b19 = b18.reverse();\n  let b20 = b19.join('');\n  let b21 = b20.split('');\n  let b22 = b21.reverse();\n  let b23 = b22.join('');\n  let b24 = b23.split('');\n  let b25 = b24.reverse();\n  let b26 = b25.join('');\n  let b27 = b26.split('');\n  let b28 = b27.reverse();\n  let b29 = b28.join('');\n  let b30 = b29.split('');\n  let b31 = b30.reverse();\n  let b32 = b31.join('');\n  let b33 = b32.split('');\n  let b34 = b33.reverse();\n  let b35 = b34.join('');\n  let b36 = b35.split('');\n  let b37"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "generation_raw": "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n```", "generation": "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "generation_raw": "  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  }\n  let result = ''\n  for (let key in roman) {\n    if (number >= key) {\n      result += roman[key]\n      number -= key\n    }\n  }\n  return result\n}\n\nconsole.log(intToMiniRoman(19))\nconsole.log(intToMiniRoman(152))\nconsole.log(intToMiniRoman(426))\n```", "generation": "  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  }\n  let result = ''\n  for (let key in roman) {\n    if (number >= key) {\n      result += roman[key]\n      number -= key\n    }\n  }\n  return result\n}"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "generation_raw": "  if (a + b <= c || a + c <= b || b + c <= a) {\n    return false;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return true;\n  }\n  if (a === b && b !== c) {\n    return a * a + b * b === c * c;\n  }\n  if (b === c && c !== a) {\n    return b * b + c * c === a * a;\n  }\n  return a * a + b * b === c * c;\n};\n\nconsole.log(rightAngleTriangle(3, 4, 5));\nconsole.log(rightAngleTriangle(1, 2, 3));\nconsole.log(rightAngleTriangle(1, 2, 1));\nconsole.log(rightAngleTriangle(1, 1, 1));\nconsole.log(rightAngleTriangle(1, 1, 2));\nconsole.log(rightAngleTriangle(1, 2, 2));\nconsole.log(rightAngleTriangle(2, 2, 2));\nconsole.log(rightAngleTriangle(2, 3, 2));\nconsole.log(rightAngleTriangle(3, 3, 3));\nconsole.log(rightAngleTriangle(3, 4, 5));\nconsole.log(rightAngleTriangle(4, 5, 6));\nconsole.log(rightAngleTriangle(5, 6, 7));\nconsole.log(rightAngleTriangle(6, 7, 8));\nconsole.log(rightAngleTriangle(7, 8, 9));\nconsole.log(rightAngleTriangle(8, 9, 10));\nconsole.log(rightAngleTriangle(9, 10, 11));\nconsole.log(rightAngleTriangle(10, 11, 12));\nconsole.log(rightAngleTri", "generation": "  if (a + b <= c || a + c <= b || b + c <= a) {\n    return false;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return true;\n  }\n  if (a === b && b !== c) {\n    return a * a + b * b === c * c;\n  }\n  if (b === c && c !== a) {\n    return b * b + c * c === a * a;\n  }\n  return a * a + b * b === c * c;\n}"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "generation_raw": "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    } else if (unique.size === max) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n```", "generation": "  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n```\n\n### \u89e3\u6cd5\u4e8c\n\n```js\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    } else if (unique.size === max) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  }\n  return maxWord;\n}"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "generation_raw": "  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number + remaining - need, 0];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number + remaining - need, 0];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.", "generation": "  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number + remaining - need, 0];\n  }\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number + remaining - need, 0];\n  }\n}"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "generation_raw": "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = result ** operand[i + 1];\n        break;\n    }\n  }\n  return result;\n};\n\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6])); // 15\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7])); // 21\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8])); // 29\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9])); // 37\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10])); // 45\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 53\nconsole.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, ", "generation": "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = result ** operand[i + 1];\n        break;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "generation_raw": "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n```", "generation": "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "generation_raw": "  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};\n```", "generation": "  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n}"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "generation_raw": "  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const num = str.split('').filter(item => item % 2 === 0).join('');\n    arr.push(Number(num));\n  }\n  return arr;\n};\n```", "generation": "  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const num = str.split('').filter(item => item % 2 === 0).join('');\n    arr.push(Number(num));\n  }\n  return arr;\n}"}
